// Generated by diesel_ext

#![allow(unused)]
#![allow(clippy::all)]

use chrono::{DateTime, Utc};
use derive_builder::WebApiGen;
use diesel::prelude::*;
use schemars::JsonSchema;
use serde::{Deserialize, Serialize};
use crate::domain::eth_addr::EthAddr;

#[derive(Queryable, Debug, Selectable, Serialize, Deserialize, JsonSchema, AsChangeset, Insertable, )]
#[diesel(table_name = crate::schema::token_pairs)]
#[diesel(check_for_backend(super::DbType))]
pub struct NewTokenPair {
    
    pub update_time: Option<DateTime<Utc>>,
    pub create_time: DateTime<Utc>,
    pub create_by: i64,
    pub update_by: Option<i64>,
    pub is_delete: bool,
    pub chain_id: i64,
    #[diesel(column_name = "token0_address")]
    pub token_0_address: EthAddr,
    #[diesel(column_name = "token0_name")]
    pub token_0_name: String,
    #[diesel(column_name = "token0_decimals")]
    pub token_0_decimals: i64,
    #[diesel(column_name = "token1_address")]
    pub token_1_address: EthAddr,
    #[diesel(column_name = "token1_name")]
    pub token_1_name: String,
    #[diesel(column_name = "token1_decimals")]
    pub token_1_decimals: i64,
    pub pair_address: EthAddr,
    pub pair_name: String,
}

#[derive(Queryable, Debug, Selectable, Serialize, Deserialize, JsonSchema, AsChangeset, Insertable, )]
#[diesel(table_name = crate::schema::wallet_token_trades)]
#[diesel(check_for_backend(super::DbType))]
pub struct NewWalletTokenTrades {
    
    pub update_time: Option<DateTime<Utc>>,
    pub create_time: DateTime<Utc>,
    pub create_by: i64,
    pub update_by: Option<i64>,
    pub is_delete: bool,
    pub chain_id: i64,
    pub wallet_id: i64,
    pub token_id: i64,
    pub token_address: EthAddr,
    pub token_amount: i64,
    pub token_usd: i64,
    pub is_buy: String,
    pub price: i64,
}

#[derive(Queryable, Debug, Selectable, Serialize, Deserialize, JsonSchema, AsChangeset, Insertable, )]
#[diesel(table_name = crate::schema::wallet_tokens)]
#[diesel(check_for_backend(super::DbType))]
pub struct NewWalletToken {
    
    pub update_time: Option<DateTime<Utc>>,
    pub create_time: DateTime<Utc>,
    pub create_by: i64,
    pub update_by: Option<i64>,
    pub is_delete: bool,
    pub chain_id: i64,
    pub wallet_id: i64,
    pub wallet_address: EthAddr,
    pub token_name: String,
    pub token_address: EthAddr,
    pub token_balance: i64,
    pub token_decimals: i64,
}

#[derive(Queryable, Debug, Selectable, Serialize, Deserialize, JsonSchema, AsChangeset, Insertable, )]
#[diesel(table_name = crate::schema::wallet_transactions)]
#[diesel(check_for_backend(super::DbType))]
pub struct NewWalletTransaction {
    
    pub update_time: Option<DateTime<Utc>>,
    pub create_time: DateTime<Utc>,
    pub create_by: i64,
    pub update_by: Option<i64>,
    pub is_delete: bool,
    pub chain_id: i64,
    pub wallet_id: i64,
    pub wallet_address: EthAddr,
    pub transaction_to: String,
    pub transaction_nonce: i64,
    pub transaction_hash: String,
    pub transaction_value: i64,
    pub transaction_block_number: i64,
    pub transaction_block_hash: String,
    pub transaction_block_timestamp: DateTime<Utc>,
    pub transaction_block_index: i64,
}

#[derive(Queryable, Debug, Selectable, Serialize, Deserialize, JsonSchema, AsChangeset, Insertable, )]
#[diesel(table_name = crate::schema::wallets)]
#[diesel(check_for_backend(super::DbType))]
pub struct NewWallet {
    
    pub update_time: Option<DateTime<Utc>>,
    pub create_time: DateTime<Utc>,
    pub create_by: i64,
    pub update_by: Option<i64>,
    pub is_delete: bool,
    pub chain_id: i64,
    pub wallet_address: EthAddr,
    pub block_number: i64,
    pub is_pending: bool,
}

#[derive(Queryable, Debug, Selectable, Serialize, Deserialize, JsonSchema, AsChangeset, Insertable, )]
#[diesel(table_name = crate::schema::block_sync)]
#[diesel(check_for_backend(super::DbType))]
pub struct NewBlockSync {
    
    pub update_time: Option<DateTime<Utc>>,
    pub create_time: DateTime<Utc>,
    pub create_by: i64,
    pub update_by: Option<i64>,
    pub is_delete: bool,
    pub chain_id: i64,
    pub block_number: i64,
}