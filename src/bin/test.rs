const _: &'static [u8] =
    ::core::include_bytes!("/home/wudi/projects/web_quic_star/src/contract/uni_pair_v3.json");
#[doc = "\n\nGenerated by the following Solidity interface...\n```solidity\ninterface UNI_PAIR_V3 {\n    event Burn(address indexed owner, int24 indexed tickLower, int24 indexed tickUpper, uint128 amount, uint256 amount0, uint256 amount1);\n    event Collect(address indexed owner, address recipient, int24 indexed tickLower, int24 indexed tickUpper, uint128 amount0, uint128 amount1);\n    event CollectProtocol(address indexed sender, address indexed recipient, uint128 amount0, uint128 amount1);\n    event Flash(address indexed sender, address indexed recipient, uint256 amount0, uint256 amount1, uint256 paid0, uint256 paid1);\n    event IncreaseObservationCardinalityNext(uint16 observationCardinalityNextOld, uint16 observationCardinalityNextNew);\n    event Initialize(uint160 sqrtPriceX96, int24 tick);\n    event Mint(address sender, address indexed owner, int24 indexed tickLower, int24 indexed tickUpper, uint128 amount, uint256 amount0, uint256 amount1);\n    event SetFeeProtocol(uint8 feeProtocol0Old, uint8 feeProtocol1Old, uint8 feeProtocol0New, uint8 feeProtocol1New);\n    event Swap(address indexed sender, address indexed recipient, int256 amount0, int256 amount1, uint160 sqrtPriceX96, uint128 liquidity, int24 tick);\n\n    constructor();\n\n    function burn(int24 tickLower, int24 tickUpper, uint128 amount) external returns (uint256 amount0, uint256 amount1);\n    function collect(address recipient, int24 tickLower, int24 tickUpper, uint128 amount0Requested, uint128 amount1Requested) external returns (uint128 amount0, uint128 amount1);\n    function collectProtocol(address recipient, uint128 amount0Requested, uint128 amount1Requested) external returns (uint128 amount0, uint128 amount1);\n    function factory() external view returns (address);\n    function fee() external view returns (uint24);\n    function feeGrowthGlobal0X128() external view returns (uint256);\n    function feeGrowthGlobal1X128() external view returns (uint256);\n    function flash(address recipient, uint256 amount0, uint256 amount1, bytes memory data) external;\n    function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\n    function initialize(uint160 sqrtPriceX96) external;\n    function liquidity() external view returns (uint128);\n    function maxLiquidityPerTick() external view returns (uint128);\n    function mint(address recipient, int24 tickLower, int24 tickUpper, uint128 amount, bytes memory data) external returns (uint256 amount0, uint256 amount1);\n    function observations(uint256) external view returns (uint32 blockTimestamp, int56 tickCumulative, uint160 secondsPerLiquidityCumulativeX128, bool initialized);\n    function observe(uint32[] memory secondsAgos) external view returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\n    function positions(bytes32) external view returns (uint128 liquidity, uint256 feeGrowthInside0LastX128, uint256 feeGrowthInside1LastX128, uint128 tokensOwed0, uint128 tokensOwed1);\n    function protocolFees() external view returns (uint128 token0, uint128 token1);\n    function setFeeProtocol(uint8 feeProtocol0, uint8 feeProtocol1) external;\n    function slot0() external view returns (uint160 sqrtPriceX96, int24 tick, uint16 observationIndex, uint16 observationCardinality, uint16 observationCardinalityNext, uint8 feeProtocol, bool unlocked);\n    function snapshotCumulativesInside(int24 tickLower, int24 tickUpper) external view returns (int56 tickCumulativeInside, uint160 secondsPerLiquidityInsideX128, uint32 secondsInside);\n    function swap(address recipient, bool zeroForOne, int256 amountSpecified, uint160 sqrtPriceLimitX96, bytes memory data) external returns (int256 amount0, int256 amount1);\n    function tickBitmap(int16) external view returns (uint256);\n    function tickSpacing() external view returns (int24);\n    function ticks(int24) external view returns (uint128 liquidityGross, int128 liquidityNet, uint256 feeGrowthOutside0X128, uint256 feeGrowthOutside1X128, int56 tickCumulativeOutside, uint160 secondsPerLiquidityOutsideX128, uint32 secondsOutside, bool initialized);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n}\n```\n\n...which was generated by the following JSON ABI:\n```json\n[\n  {\n    \"type\": \"constructor\",\n    \"inputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"burn\",\n    \"inputs\": [\n      {\n        \"name\": \"tickLower\",\n        \"type\": \"int24\",\n        \"internalType\": \"int24\"\n      },\n      {\n        \"name\": \"tickUpper\",\n        \"type\": \"int24\",\n        \"internalType\": \"int24\"\n      },\n      {\n        \"name\": \"amount\",\n        \"type\": \"uint128\",\n        \"internalType\": \"uint128\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"amount0\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"amount1\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"collect\",\n    \"inputs\": [\n      {\n        \"name\": \"recipient\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"tickLower\",\n        \"type\": \"int24\",\n        \"internalType\": \"int24\"\n      },\n      {\n        \"name\": \"tickUpper\",\n        \"type\": \"int24\",\n        \"internalType\": \"int24\"\n      },\n      {\n        \"name\": \"amount0Requested\",\n        \"type\": \"uint128\",\n        \"internalType\": \"uint128\"\n      },\n      {\n        \"name\": \"amount1Requested\",\n        \"type\": \"uint128\",\n        \"internalType\": \"uint128\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"amount0\",\n        \"type\": \"uint128\",\n        \"internalType\": \"uint128\"\n      },\n      {\n        \"name\": \"amount1\",\n        \"type\": \"uint128\",\n        \"internalType\": \"uint128\"\n      }\n    ],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"collectProtocol\",\n    \"inputs\": [\n      {\n        \"name\": \"recipient\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"amount0Requested\",\n        \"type\": \"uint128\",\n        \"internalType\": \"uint128\"\n      },\n      {\n        \"name\": \"amount1Requested\",\n        \"type\": \"uint128\",\n        \"internalType\": \"uint128\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"amount0\",\n        \"type\": \"uint128\",\n        \"internalType\": \"uint128\"\n      },\n      {\n        \"name\": \"amount1\",\n        \"type\": \"uint128\",\n        \"internalType\": \"uint128\"\n      }\n    ],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"factory\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"fee\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"uint24\",\n        \"internalType\": \"uint24\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"feeGrowthGlobal0X128\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"feeGrowthGlobal1X128\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"flash\",\n    \"inputs\": [\n      {\n        \"name\": \"recipient\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"amount0\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"amount1\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"data\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"increaseObservationCardinalityNext\",\n    \"inputs\": [\n      {\n        \"name\": \"observationCardinalityNext\",\n        \"type\": \"uint16\",\n        \"internalType\": \"uint16\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"initialize\",\n    \"inputs\": [\n      {\n        \"name\": \"sqrtPriceX96\",\n        \"type\": \"uint160\",\n        \"internalType\": \"uint160\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"liquidity\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"uint128\",\n        \"internalType\": \"uint128\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"maxLiquidityPerTick\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"uint128\",\n        \"internalType\": \"uint128\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"mint\",\n    \"inputs\": [\n      {\n        \"name\": \"recipient\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"tickLower\",\n        \"type\": \"int24\",\n        \"internalType\": \"int24\"\n      },\n      {\n        \"name\": \"tickUpper\",\n        \"type\": \"int24\",\n        \"internalType\": \"int24\"\n      },\n      {\n        \"name\": \"amount\",\n        \"type\": \"uint128\",\n        \"internalType\": \"uint128\"\n      },\n      {\n        \"name\": \"data\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"amount0\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"amount1\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"observations\",\n    \"inputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"blockTimestamp\",\n        \"type\": \"uint32\",\n        \"internalType\": \"uint32\"\n      },\n      {\n        \"name\": \"tickCumulative\",\n        \"type\": \"int56\",\n        \"internalType\": \"int56\"\n      },\n      {\n        \"name\": \"secondsPerLiquidityCumulativeX128\",\n        \"type\": \"uint160\",\n        \"internalType\": \"uint160\"\n      },\n      {\n        \"name\": \"initialized\",\n        \"type\": \"bool\",\n        \"internalType\": \"bool\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"observe\",\n    \"inputs\": [\n      {\n        \"name\": \"secondsAgos\",\n        \"type\": \"uint32[]\",\n        \"internalType\": \"uint32[]\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"tickCumulatives\",\n        \"type\": \"int56[]\",\n        \"internalType\": \"int56[]\"\n      },\n      {\n        \"name\": \"secondsPerLiquidityCumulativeX128s\",\n        \"type\": \"uint160[]\",\n        \"internalType\": \"uint160[]\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"positions\",\n    \"inputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bytes32\",\n        \"internalType\": \"bytes32\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"liquidity\",\n        \"type\": \"uint128\",\n        \"internalType\": \"uint128\"\n      },\n      {\n        \"name\": \"feeGrowthInside0LastX128\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"feeGrowthInside1LastX128\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"tokensOwed0\",\n        \"type\": \"uint128\",\n        \"internalType\": \"uint128\"\n      },\n      {\n        \"name\": \"tokensOwed1\",\n        \"type\": \"uint128\",\n        \"internalType\": \"uint128\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"protocolFees\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"token0\",\n        \"type\": \"uint128\",\n        \"internalType\": \"uint128\"\n      },\n      {\n        \"name\": \"token1\",\n        \"type\": \"uint128\",\n        \"internalType\": \"uint128\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"setFeeProtocol\",\n    \"inputs\": [\n      {\n        \"name\": \"feeProtocol0\",\n        \"type\": \"uint8\",\n        \"internalType\": \"uint8\"\n      },\n      {\n        \"name\": \"feeProtocol1\",\n        \"type\": \"uint8\",\n        \"internalType\": \"uint8\"\n      }\n    ],\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"slot0\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"sqrtPriceX96\",\n        \"type\": \"uint160\",\n        \"internalType\": \"uint160\"\n      },\n      {\n        \"name\": \"tick\",\n        \"type\": \"int24\",\n        \"internalType\": \"int24\"\n      },\n      {\n        \"name\": \"observationIndex\",\n        \"type\": \"uint16\",\n        \"internalType\": \"uint16\"\n      },\n      {\n        \"name\": \"observationCardinality\",\n        \"type\": \"uint16\",\n        \"internalType\": \"uint16\"\n      },\n      {\n        \"name\": \"observationCardinalityNext\",\n        \"type\": \"uint16\",\n        \"internalType\": \"uint16\"\n      },\n      {\n        \"name\": \"feeProtocol\",\n        \"type\": \"uint8\",\n        \"internalType\": \"uint8\"\n      },\n      {\n        \"name\": \"unlocked\",\n        \"type\": \"bool\",\n        \"internalType\": \"bool\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"snapshotCumulativesInside\",\n    \"inputs\": [\n      {\n        \"name\": \"tickLower\",\n        \"type\": \"int24\",\n        \"internalType\": \"int24\"\n      },\n      {\n        \"name\": \"tickUpper\",\n        \"type\": \"int24\",\n        \"internalType\": \"int24\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"tickCumulativeInside\",\n        \"type\": \"int56\",\n        \"internalType\": \"int56\"\n      },\n      {\n        \"name\": \"secondsPerLiquidityInsideX128\",\n        \"type\": \"uint160\",\n        \"internalType\": \"uint160\"\n      },\n      {\n        \"name\": \"secondsInside\",\n        \"type\": \"uint32\",\n        \"internalType\": \"uint32\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"swap\",\n    \"inputs\": [\n      {\n        \"name\": \"recipient\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"zeroForOne\",\n        \"type\": \"bool\",\n        \"internalType\": \"bool\"\n      },\n      {\n        \"name\": \"amountSpecified\",\n        \"type\": \"int256\",\n        \"internalType\": \"int256\"\n      },\n      {\n        \"name\": \"sqrtPriceLimitX96\",\n        \"type\": \"uint160\",\n        \"internalType\": \"uint160\"\n      },\n      {\n        \"name\": \"data\",\n        \"type\": \"bytes\",\n        \"internalType\": \"bytes\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"amount0\",\n        \"type\": \"int256\",\n        \"internalType\": \"int256\"\n      },\n      {\n        \"name\": \"amount1\",\n        \"type\": \"int256\",\n        \"internalType\": \"int256\"\n      }\n    ],\n    \"stateMutability\": \"nonpayable\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"tickBitmap\",\n    \"inputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"int16\",\n        \"internalType\": \"int16\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"tickSpacing\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"int24\",\n        \"internalType\": \"int24\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"ticks\",\n    \"inputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"int24\",\n        \"internalType\": \"int24\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"liquidityGross\",\n        \"type\": \"uint128\",\n        \"internalType\": \"uint128\"\n      },\n      {\n        \"name\": \"liquidityNet\",\n        \"type\": \"int128\",\n        \"internalType\": \"int128\"\n      },\n      {\n        \"name\": \"feeGrowthOutside0X128\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"feeGrowthOutside1X128\",\n        \"type\": \"uint256\",\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"tickCumulativeOutside\",\n        \"type\": \"int56\",\n        \"internalType\": \"int56\"\n      },\n      {\n        \"name\": \"secondsPerLiquidityOutsideX128\",\n        \"type\": \"uint160\",\n        \"internalType\": \"uint160\"\n      },\n      {\n        \"name\": \"secondsOutside\",\n        \"type\": \"uint32\",\n        \"internalType\": \"uint32\"\n      },\n      {\n        \"name\": \"initialized\",\n        \"type\": \"bool\",\n        \"internalType\": \"bool\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"token0\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"function\",\n    \"name\": \"token1\",\n    \"inputs\": [],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"address\",\n        \"internalType\": \"address\"\n      }\n    ],\n    \"stateMutability\": \"view\"\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"Burn\",\n    \"inputs\": [\n      {\n        \"name\": \"owner\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"tickLower\",\n        \"type\": \"int24\",\n        \"indexed\": true,\n        \"internalType\": \"int24\"\n      },\n      {\n        \"name\": \"tickUpper\",\n        \"type\": \"int24\",\n        \"indexed\": true,\n        \"internalType\": \"int24\"\n      },\n      {\n        \"name\": \"amount\",\n        \"type\": \"uint128\",\n        \"indexed\": false,\n        \"internalType\": \"uint128\"\n      },\n      {\n        \"name\": \"amount0\",\n        \"type\": \"uint256\",\n        \"indexed\": false,\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"amount1\",\n        \"type\": \"uint256\",\n        \"indexed\": false,\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"Collect\",\n    \"inputs\": [\n      {\n        \"name\": \"owner\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"recipient\",\n        \"type\": \"address\",\n        \"indexed\": false,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"tickLower\",\n        \"type\": \"int24\",\n        \"indexed\": true,\n        \"internalType\": \"int24\"\n      },\n      {\n        \"name\": \"tickUpper\",\n        \"type\": \"int24\",\n        \"indexed\": true,\n        \"internalType\": \"int24\"\n      },\n      {\n        \"name\": \"amount0\",\n        \"type\": \"uint128\",\n        \"indexed\": false,\n        \"internalType\": \"uint128\"\n      },\n      {\n        \"name\": \"amount1\",\n        \"type\": \"uint128\",\n        \"indexed\": false,\n        \"internalType\": \"uint128\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"CollectProtocol\",\n    \"inputs\": [\n      {\n        \"name\": \"sender\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"recipient\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"amount0\",\n        \"type\": \"uint128\",\n        \"indexed\": false,\n        \"internalType\": \"uint128\"\n      },\n      {\n        \"name\": \"amount1\",\n        \"type\": \"uint128\",\n        \"indexed\": false,\n        \"internalType\": \"uint128\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"Flash\",\n    \"inputs\": [\n      {\n        \"name\": \"sender\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"recipient\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"amount0\",\n        \"type\": \"uint256\",\n        \"indexed\": false,\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"amount1\",\n        \"type\": \"uint256\",\n        \"indexed\": false,\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"paid0\",\n        \"type\": \"uint256\",\n        \"indexed\": false,\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"paid1\",\n        \"type\": \"uint256\",\n        \"indexed\": false,\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"IncreaseObservationCardinalityNext\",\n    \"inputs\": [\n      {\n        \"name\": \"observationCardinalityNextOld\",\n        \"type\": \"uint16\",\n        \"indexed\": false,\n        \"internalType\": \"uint16\"\n      },\n      {\n        \"name\": \"observationCardinalityNextNew\",\n        \"type\": \"uint16\",\n        \"indexed\": false,\n        \"internalType\": \"uint16\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"Initialize\",\n    \"inputs\": [\n      {\n        \"name\": \"sqrtPriceX96\",\n        \"type\": \"uint160\",\n        \"indexed\": false,\n        \"internalType\": \"uint160\"\n      },\n      {\n        \"name\": \"tick\",\n        \"type\": \"int24\",\n        \"indexed\": false,\n        \"internalType\": \"int24\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"Mint\",\n    \"inputs\": [\n      {\n        \"name\": \"sender\",\n        \"type\": \"address\",\n        \"indexed\": false,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"owner\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"tickLower\",\n        \"type\": \"int24\",\n        \"indexed\": true,\n        \"internalType\": \"int24\"\n      },\n      {\n        \"name\": \"tickUpper\",\n        \"type\": \"int24\",\n        \"indexed\": true,\n        \"internalType\": \"int24\"\n      },\n      {\n        \"name\": \"amount\",\n        \"type\": \"uint128\",\n        \"indexed\": false,\n        \"internalType\": \"uint128\"\n      },\n      {\n        \"name\": \"amount0\",\n        \"type\": \"uint256\",\n        \"indexed\": false,\n        \"internalType\": \"uint256\"\n      },\n      {\n        \"name\": \"amount1\",\n        \"type\": \"uint256\",\n        \"indexed\": false,\n        \"internalType\": \"uint256\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"SetFeeProtocol\",\n    \"inputs\": [\n      {\n        \"name\": \"feeProtocol0Old\",\n        \"type\": \"uint8\",\n        \"indexed\": false,\n        \"internalType\": \"uint8\"\n      },\n      {\n        \"name\": \"feeProtocol1Old\",\n        \"type\": \"uint8\",\n        \"indexed\": false,\n        \"internalType\": \"uint8\"\n      },\n      {\n        \"name\": \"feeProtocol0New\",\n        \"type\": \"uint8\",\n        \"indexed\": false,\n        \"internalType\": \"uint8\"\n      },\n      {\n        \"name\": \"feeProtocol1New\",\n        \"type\": \"uint8\",\n        \"indexed\": false,\n        \"internalType\": \"uint8\"\n      }\n    ],\n    \"anonymous\": false\n  },\n  {\n    \"type\": \"event\",\n    \"name\": \"Swap\",\n    \"inputs\": [\n      {\n        \"name\": \"sender\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"recipient\",\n        \"type\": \"address\",\n        \"indexed\": true,\n        \"internalType\": \"address\"\n      },\n      {\n        \"name\": \"amount0\",\n        \"type\": \"int256\",\n        \"indexed\": false,\n        \"internalType\": \"int256\"\n      },\n      {\n        \"name\": \"amount1\",\n        \"type\": \"int256\",\n        \"indexed\": false,\n        \"internalType\": \"int256\"\n      },\n      {\n        \"name\": \"sqrtPriceX96\",\n        \"type\": \"uint160\",\n        \"indexed\": false,\n        \"internalType\": \"uint160\"\n      },\n      {\n        \"name\": \"liquidity\",\n        \"type\": \"uint128\",\n        \"indexed\": false,\n        \"internalType\": \"uint128\"\n      },\n      {\n        \"name\": \"tick\",\n        \"type\": \"int24\",\n        \"indexed\": false,\n        \"internalType\": \"int24\"\n      }\n    ],\n    \"anonymous\": false\n  }\n]\n```"]
#[allow(missing_docs)]
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod UNI_PAIR_V3 {
    use super::*;
    use ::alloy::sol_types as alloy_sol_types;
    #[allow(missing_docs)]
    #[doc = "Event with signature `Burn(address,int24,int24,uint128,uint256,uint256)` and selector `0x0c396cd989a39f4459b5fa1aed6a9a8dcdbc45908acfd67e028cd568da98982c`.\n```solidity\nevent Burn(address indexed owner, int24 indexed tickLower, int24 indexed tickUpper, uint128 amount, uint256 amount0, uint256 amount1);\n```"]
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct Burn {
        #[allow(missing_docs)]
        pub owner: ::alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub tickLower: ::alloy::sol_types::private::primitives::aliases::I24,
        #[allow(missing_docs)]
        pub tickUpper: ::alloy::sol_types::private::primitives::aliases::I24,
        #[allow(missing_docs)]
        pub amount: u128,
        #[allow(missing_docs)]
        pub amount0: ::alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub amount1: ::alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use ::alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for Burn {
            type DataTuple<'a> = (
                ::alloy::sol_types::sol_data::Uint<128>,
                ::alloy::sol_types::sol_data::Uint<256>,
                ::alloy::sol_types::sol_data::Uint<256>,
            );
            type DataToken<'a> = <Self::DataTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                ::alloy::sol_types::sol_data::Address,
                ::alloy::sol_types::sol_data::Int<24>,
                ::alloy::sol_types::sol_data::Int<24>,
            );
            const SIGNATURE: &'static str = "Burn(address,int24,int24,uint128,uint256,uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 =
                alloy_sol_types::private::B256::new([
                    12u8, 57u8, 108u8, 217u8, 137u8, 163u8, 159u8, 68u8, 89u8, 181u8, 250u8, 26u8,
                    237u8, 106u8, 154u8, 141u8, 205u8, 188u8, 69u8, 144u8, 138u8, 207u8, 214u8,
                    126u8, 2u8, 140u8, 213u8, 104u8, 218u8, 152u8, 152u8, 44u8,
                ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    owner: topics.1,
                    tickLower: topics.2,
                    tickUpper: topics.3,
                    amount: data.0,
                    amount0: data.1,
                    amount1: data.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(alloy_sol_types::Error::invalid_event_signature_hash(
                        Self::SIGNATURE,
                        topics.0,
                        Self::SIGNATURE_HASH,
                    ));
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <::alloy::sol_types::sol_data::Uint<128> as alloy_sol_types::SolType>::tokenize(
                        &self.amount,
                    ),
                    <::alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.amount0,
                    ),
                    <::alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.amount1,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.owner.clone(),
                    self.tickLower.clone(),
                    self.tickUpper.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(Self::SIGNATURE_HASH);
                out[1usize] = <::alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(&self.owner);
                out[2usize] = <::alloy::sol_types::sol_data::Int<24> as alloy_sol_types::EventTopic>::encode_topic(&self.tickLower);
                out[3usize] = <::alloy::sol_types::sol_data::Int<24> as alloy_sol_types::EventTopic>::encode_topic(&self.tickUpper);
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for Burn {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&Burn> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &Burn) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[allow(missing_docs)]
    #[doc = "Event with signature `Collect(address,address,int24,int24,uint128,uint128)` and selector `0x70935338e69775456a85ddef226c395fb668b63fa0115f5f20610b388e6ca9c0`.\n```solidity\nevent Collect(address indexed owner, address recipient, int24 indexed tickLower, int24 indexed tickUpper, uint128 amount0, uint128 amount1);\n```"]
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct Collect {
        #[allow(missing_docs)]
        pub owner: ::alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub recipient: ::alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub tickLower: ::alloy::sol_types::private::primitives::aliases::I24,
        #[allow(missing_docs)]
        pub tickUpper: ::alloy::sol_types::private::primitives::aliases::I24,
        #[allow(missing_docs)]
        pub amount0: u128,
        #[allow(missing_docs)]
        pub amount1: u128,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use ::alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for Collect {
            type DataTuple<'a> = (
                ::alloy::sol_types::sol_data::Address,
                ::alloy::sol_types::sol_data::Uint<128>,
                ::alloy::sol_types::sol_data::Uint<128>,
            );
            type DataToken<'a> = <Self::DataTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                ::alloy::sol_types::sol_data::Address,
                ::alloy::sol_types::sol_data::Int<24>,
                ::alloy::sol_types::sol_data::Int<24>,
            );
            const SIGNATURE: &'static str = "Collect(address,address,int24,int24,uint128,uint128)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 =
                alloy_sol_types::private::B256::new([
                    112u8, 147u8, 83u8, 56u8, 230u8, 151u8, 117u8, 69u8, 106u8, 133u8, 221u8,
                    239u8, 34u8, 108u8, 57u8, 95u8, 182u8, 104u8, 182u8, 63u8, 160u8, 17u8, 95u8,
                    95u8, 32u8, 97u8, 11u8, 56u8, 142u8, 108u8, 169u8, 192u8,
                ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    owner: topics.1,
                    recipient: data.0,
                    tickLower: topics.2,
                    tickUpper: topics.3,
                    amount0: data.1,
                    amount1: data.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(alloy_sol_types::Error::invalid_event_signature_hash(
                        Self::SIGNATURE,
                        topics.0,
                        Self::SIGNATURE_HASH,
                    ));
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <::alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.recipient,
                    ),
                    <::alloy::sol_types::sol_data::Uint<128> as alloy_sol_types::SolType>::tokenize(
                        &self.amount0,
                    ),
                    <::alloy::sol_types::sol_data::Uint<128> as alloy_sol_types::SolType>::tokenize(
                        &self.amount1,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.owner.clone(),
                    self.tickLower.clone(),
                    self.tickUpper.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(Self::SIGNATURE_HASH);
                out[1usize] = <::alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(&self.owner);
                out[2usize] = <::alloy::sol_types::sol_data::Int<24> as alloy_sol_types::EventTopic>::encode_topic(&self.tickLower);
                out[3usize] = <::alloy::sol_types::sol_data::Int<24> as alloy_sol_types::EventTopic>::encode_topic(&self.tickUpper);
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for Collect {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&Collect> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &Collect) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[allow(missing_docs)]
    #[doc = "Event with signature `CollectProtocol(address,address,uint128,uint128)` and selector `0x596b573906218d3411850b26a6b437d6c4522fdb43d2d2386263f86d50b8b151`.\n```solidity\nevent CollectProtocol(address indexed sender, address indexed recipient, uint128 amount0, uint128 amount1);\n```"]
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct CollectProtocol {
        #[allow(missing_docs)]
        pub sender: ::alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub recipient: ::alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub amount0: u128,
        #[allow(missing_docs)]
        pub amount1: u128,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use ::alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for CollectProtocol {
            type DataTuple<'a> = (
                ::alloy::sol_types::sol_data::Uint<128>,
                ::alloy::sol_types::sol_data::Uint<128>,
            );
            type DataToken<'a> = <Self::DataTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                ::alloy::sol_types::sol_data::Address,
                ::alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "CollectProtocol(address,address,uint128,uint128)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 =
                alloy_sol_types::private::B256::new([
                    89u8, 107u8, 87u8, 57u8, 6u8, 33u8, 141u8, 52u8, 17u8, 133u8, 11u8, 38u8,
                    166u8, 180u8, 55u8, 214u8, 196u8, 82u8, 47u8, 219u8, 67u8, 210u8, 210u8, 56u8,
                    98u8, 99u8, 248u8, 109u8, 80u8, 184u8, 177u8, 81u8,
                ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    sender: topics.1,
                    recipient: topics.2,
                    amount0: data.0,
                    amount1: data.1,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(alloy_sol_types::Error::invalid_event_signature_hash(
                        Self::SIGNATURE,
                        topics.0,
                        Self::SIGNATURE_HASH,
                    ));
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <::alloy::sol_types::sol_data::Uint<128> as alloy_sol_types::SolType>::tokenize(
                        &self.amount0,
                    ),
                    <::alloy::sol_types::sol_data::Uint<128> as alloy_sol_types::SolType>::tokenize(
                        &self.amount1,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.sender.clone(),
                    self.recipient.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(Self::SIGNATURE_HASH);
                out[1usize] = <::alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(&self.sender);
                out[2usize] = <::alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(&self.recipient);
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for CollectProtocol {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&CollectProtocol> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &CollectProtocol) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[allow(missing_docs)]
    #[doc = "Event with signature `Flash(address,address,uint256,uint256,uint256,uint256)` and selector `0xbdbdb71d7860376ba52b25a5028beea23581364a40522f6bcfb86bb1f2dca633`.\n```solidity\nevent Flash(address indexed sender, address indexed recipient, uint256 amount0, uint256 amount1, uint256 paid0, uint256 paid1);\n```"]
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct Flash {
        #[allow(missing_docs)]
        pub sender: ::alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub recipient: ::alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub amount0: ::alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub amount1: ::alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub paid0: ::alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub paid1: ::alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use ::alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for Flash {
            type DataTuple<'a> = (
                ::alloy::sol_types::sol_data::Uint<256>,
                ::alloy::sol_types::sol_data::Uint<256>,
                ::alloy::sol_types::sol_data::Uint<256>,
                ::alloy::sol_types::sol_data::Uint<256>,
            );
            type DataToken<'a> = <Self::DataTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                ::alloy::sol_types::sol_data::Address,
                ::alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str =
                "Flash(address,address,uint256,uint256,uint256,uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 =
                alloy_sol_types::private::B256::new([
                    189u8, 189u8, 183u8, 29u8, 120u8, 96u8, 55u8, 107u8, 165u8, 43u8, 37u8, 165u8,
                    2u8, 139u8, 238u8, 162u8, 53u8, 129u8, 54u8, 74u8, 64u8, 82u8, 47u8, 107u8,
                    207u8, 184u8, 107u8, 177u8, 242u8, 220u8, 166u8, 51u8,
                ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    sender: topics.1,
                    recipient: topics.2,
                    amount0: data.0,
                    amount1: data.1,
                    paid0: data.2,
                    paid1: data.3,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(alloy_sol_types::Error::invalid_event_signature_hash(
                        Self::SIGNATURE,
                        topics.0,
                        Self::SIGNATURE_HASH,
                    ));
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <::alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.amount0,
                    ),
                    <::alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.amount1,
                    ),
                    <::alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.paid0,
                    ),
                    <::alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.paid1,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.sender.clone(),
                    self.recipient.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(Self::SIGNATURE_HASH);
                out[1usize] = <::alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(&self.sender);
                out[2usize] = <::alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(&self.recipient);
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for Flash {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&Flash> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &Flash) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[allow(missing_docs)]
    #[doc = "Event with signature `IncreaseObservationCardinalityNext(uint16,uint16)` and selector `0xac49e518f90a358f652e4400164f05a5d8f7e35e7747279bc3a93dbf584e125a`.\n```solidity\nevent IncreaseObservationCardinalityNext(uint16 observationCardinalityNextOld, uint16 observationCardinalityNextNew);\n```"]
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct IncreaseObservationCardinalityNext {
        #[allow(missing_docs)]
        pub observationCardinalityNextOld: u16,
        #[allow(missing_docs)]
        pub observationCardinalityNextNew: u16,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use ::alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for IncreaseObservationCardinalityNext {
            type DataTuple<'a> = (
                ::alloy::sol_types::sol_data::Uint<16>,
                ::alloy::sol_types::sol_data::Uint<16>,
            );
            type DataToken<'a> = <Self::DataTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "IncreaseObservationCardinalityNext(uint16,uint16)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 =
                alloy_sol_types::private::B256::new([
                    172u8, 73u8, 229u8, 24u8, 249u8, 10u8, 53u8, 143u8, 101u8, 46u8, 68u8, 0u8,
                    22u8, 79u8, 5u8, 165u8, 216u8, 247u8, 227u8, 94u8, 119u8, 71u8, 39u8, 155u8,
                    195u8, 169u8, 61u8, 191u8, 88u8, 78u8, 18u8, 90u8,
                ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    observationCardinalityNextOld: data.0,
                    observationCardinalityNextNew: data.1,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(alloy_sol_types::Error::invalid_event_signature_hash(
                        Self::SIGNATURE,
                        topics.0,
                        Self::SIGNATURE_HASH,
                    ));
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <::alloy::sol_types::sol_data::Uint<16> as alloy_sol_types::SolType>::tokenize(
                        &self.observationCardinalityNextOld,
                    ),
                    <::alloy::sol_types::sol_data::Uint<16> as alloy_sol_types::SolType>::tokenize(
                        &self.observationCardinalityNextNew,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(Self::SIGNATURE_HASH);
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for IncreaseObservationCardinalityNext {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&IncreaseObservationCardinalityNext> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(
                this: &IncreaseObservationCardinalityNext,
            ) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[allow(missing_docs)]
    #[doc = "Event with signature `Initialize(uint160,int24)` and selector `0x98636036cb66a9c19a37435efc1e90142190214e8abeb821bdba3f2990dd4c95`.\n```solidity\nevent Initialize(uint160 sqrtPriceX96, int24 tick);\n```"]
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct Initialize {
        #[allow(missing_docs)]
        pub sqrtPriceX96: ::alloy::sol_types::private::primitives::aliases::U160,
        #[allow(missing_docs)]
        pub tick: ::alloy::sol_types::private::primitives::aliases::I24,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use ::alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for Initialize {
            type DataTuple<'a> = (
                ::alloy::sol_types::sol_data::Uint<160>,
                ::alloy::sol_types::sol_data::Int<24>,
            );
            type DataToken<'a> = <Self::DataTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "Initialize(uint160,int24)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 =
                alloy_sol_types::private::B256::new([
                    152u8, 99u8, 96u8, 54u8, 203u8, 102u8, 169u8, 193u8, 154u8, 55u8, 67u8, 94u8,
                    252u8, 30u8, 144u8, 20u8, 33u8, 144u8, 33u8, 78u8, 138u8, 190u8, 184u8, 33u8,
                    189u8, 186u8, 63u8, 41u8, 144u8, 221u8, 76u8, 149u8,
                ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    sqrtPriceX96: data.0,
                    tick: data.1,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(alloy_sol_types::Error::invalid_event_signature_hash(
                        Self::SIGNATURE,
                        topics.0,
                        Self::SIGNATURE_HASH,
                    ));
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <::alloy::sol_types::sol_data::Uint<160> as alloy_sol_types::SolType>::tokenize(
                        &self.sqrtPriceX96,
                    ),
                    <::alloy::sol_types::sol_data::Int<24> as alloy_sol_types::SolType>::tokenize(
                        &self.tick,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(Self::SIGNATURE_HASH);
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for Initialize {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&Initialize> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &Initialize) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[allow(missing_docs)]
    #[doc = "Event with signature `Mint(address,address,int24,int24,uint128,uint256,uint256)` and selector `0x7a53080ba414158be7ec69b987b5fb7d07dee101fe85488f0853ae16239d0bde`.\n```solidity\nevent Mint(address sender, address indexed owner, int24 indexed tickLower, int24 indexed tickUpper, uint128 amount, uint256 amount0, uint256 amount1);\n```"]
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct Mint {
        #[allow(missing_docs)]
        pub sender: ::alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub owner: ::alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub tickLower: ::alloy::sol_types::private::primitives::aliases::I24,
        #[allow(missing_docs)]
        pub tickUpper: ::alloy::sol_types::private::primitives::aliases::I24,
        #[allow(missing_docs)]
        pub amount: u128,
        #[allow(missing_docs)]
        pub amount0: ::alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub amount1: ::alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use ::alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for Mint {
            type DataTuple<'a> = (
                ::alloy::sol_types::sol_data::Address,
                ::alloy::sol_types::sol_data::Uint<128>,
                ::alloy::sol_types::sol_data::Uint<256>,
                ::alloy::sol_types::sol_data::Uint<256>,
            );
            type DataToken<'a> = <Self::DataTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                ::alloy::sol_types::sol_data::Address,
                ::alloy::sol_types::sol_data::Int<24>,
                ::alloy::sol_types::sol_data::Int<24>,
            );
            const SIGNATURE: &'static str =
                "Mint(address,address,int24,int24,uint128,uint256,uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 =
                alloy_sol_types::private::B256::new([
                    122u8, 83u8, 8u8, 11u8, 164u8, 20u8, 21u8, 139u8, 231u8, 236u8, 105u8, 185u8,
                    135u8, 181u8, 251u8, 125u8, 7u8, 222u8, 225u8, 1u8, 254u8, 133u8, 72u8, 143u8,
                    8u8, 83u8, 174u8, 22u8, 35u8, 157u8, 11u8, 222u8,
                ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    sender: data.0,
                    owner: topics.1,
                    tickLower: topics.2,
                    tickUpper: topics.3,
                    amount: data.1,
                    amount0: data.2,
                    amount1: data.3,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(alloy_sol_types::Error::invalid_event_signature_hash(
                        Self::SIGNATURE,
                        topics.0,
                        Self::SIGNATURE_HASH,
                    ));
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <::alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.sender,
                    ),
                    <::alloy::sol_types::sol_data::Uint<128> as alloy_sol_types::SolType>::tokenize(
                        &self.amount,
                    ),
                    <::alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.amount0,
                    ),
                    <::alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.amount1,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.owner.clone(),
                    self.tickLower.clone(),
                    self.tickUpper.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(Self::SIGNATURE_HASH);
                out[1usize] = <::alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(&self.owner);
                out[2usize] = <::alloy::sol_types::sol_data::Int<24> as alloy_sol_types::EventTopic>::encode_topic(&self.tickLower);
                out[3usize] = <::alloy::sol_types::sol_data::Int<24> as alloy_sol_types::EventTopic>::encode_topic(&self.tickUpper);
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for Mint {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&Mint> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &Mint) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[allow(missing_docs)]
    #[doc = "Event with signature `SetFeeProtocol(uint8,uint8,uint8,uint8)` and selector `0x973d8d92bb299f4af6ce49b52a8adb85ae46b9f214c4c4fc06ac77401237b133`.\n```solidity\nevent SetFeeProtocol(uint8 feeProtocol0Old, uint8 feeProtocol1Old, uint8 feeProtocol0New, uint8 feeProtocol1New);\n```"]
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct SetFeeProtocol {
        #[allow(missing_docs)]
        pub feeProtocol0Old: u8,
        #[allow(missing_docs)]
        pub feeProtocol1Old: u8,
        #[allow(missing_docs)]
        pub feeProtocol0New: u8,
        #[allow(missing_docs)]
        pub feeProtocol1New: u8,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use ::alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for SetFeeProtocol {
            type DataTuple<'a> = (
                ::alloy::sol_types::sol_data::Uint<8>,
                ::alloy::sol_types::sol_data::Uint<8>,
                ::alloy::sol_types::sol_data::Uint<8>,
                ::alloy::sol_types::sol_data::Uint<8>,
            );
            type DataToken<'a> = <Self::DataTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "SetFeeProtocol(uint8,uint8,uint8,uint8)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 =
                alloy_sol_types::private::B256::new([
                    151u8, 61u8, 141u8, 146u8, 187u8, 41u8, 159u8, 74u8, 246u8, 206u8, 73u8, 181u8,
                    42u8, 138u8, 219u8, 133u8, 174u8, 70u8, 185u8, 242u8, 20u8, 196u8, 196u8,
                    252u8, 6u8, 172u8, 119u8, 64u8, 18u8, 55u8, 177u8, 51u8,
                ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    feeProtocol0Old: data.0,
                    feeProtocol1Old: data.1,
                    feeProtocol0New: data.2,
                    feeProtocol1New: data.3,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(alloy_sol_types::Error::invalid_event_signature_hash(
                        Self::SIGNATURE,
                        topics.0,
                        Self::SIGNATURE_HASH,
                    ));
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <::alloy::sol_types::sol_data::Uint<8> as alloy_sol_types::SolType>::tokenize(
                        &self.feeProtocol0Old,
                    ),
                    <::alloy::sol_types::sol_data::Uint<8> as alloy_sol_types::SolType>::tokenize(
                        &self.feeProtocol1Old,
                    ),
                    <::alloy::sol_types::sol_data::Uint<8> as alloy_sol_types::SolType>::tokenize(
                        &self.feeProtocol0New,
                    ),
                    <::alloy::sol_types::sol_data::Uint<8> as alloy_sol_types::SolType>::tokenize(
                        &self.feeProtocol1New,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(Self::SIGNATURE_HASH);
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for SetFeeProtocol {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&SetFeeProtocol> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &SetFeeProtocol) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[allow(missing_docs)]
    #[doc = "Event with signature `Swap(address,address,int256,int256,uint160,uint128,int24)` and selector `0xc42079f94a6350d7e6235f29174924f928cc2ac818eb64fed8004e115fbcca67`.\n```solidity\nevent Swap(address indexed sender, address indexed recipient, int256 amount0, int256 amount1, uint160 sqrtPriceX96, uint128 liquidity, int24 tick);\n```"]
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct Swap {
        #[allow(missing_docs)]
        pub sender: ::alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub recipient: ::alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub amount0: ::alloy::sol_types::private::primitives::aliases::I256,
        #[allow(missing_docs)]
        pub amount1: ::alloy::sol_types::private::primitives::aliases::I256,
        #[allow(missing_docs)]
        pub sqrtPriceX96: ::alloy::sol_types::private::primitives::aliases::U160,
        #[allow(missing_docs)]
        pub liquidity: u128,
        #[allow(missing_docs)]
        pub tick: ::alloy::sol_types::private::primitives::aliases::I24,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use ::alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for Swap {
            type DataTuple<'a> = (
                ::alloy::sol_types::sol_data::Int<256>,
                ::alloy::sol_types::sol_data::Int<256>,
                ::alloy::sol_types::sol_data::Uint<160>,
                ::alloy::sol_types::sol_data::Uint<128>,
                ::alloy::sol_types::sol_data::Int<24>,
            );
            type DataToken<'a> = <Self::DataTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                ::alloy::sol_types::sol_data::Address,
                ::alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str =
                "Swap(address,address,int256,int256,uint160,uint128,int24)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 =
                alloy_sol_types::private::B256::new([
                    196u8, 32u8, 121u8, 249u8, 74u8, 99u8, 80u8, 215u8, 230u8, 35u8, 95u8, 41u8,
                    23u8, 73u8, 36u8, 249u8, 40u8, 204u8, 42u8, 200u8, 24u8, 235u8, 100u8, 254u8,
                    216u8, 0u8, 78u8, 17u8, 95u8, 188u8, 202u8, 103u8,
                ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    sender: topics.1,
                    recipient: topics.2,
                    amount0: data.0,
                    amount1: data.1,
                    sqrtPriceX96: data.2,
                    liquidity: data.3,
                    tick: data.4,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(alloy_sol_types::Error::invalid_event_signature_hash(
                        Self::SIGNATURE,
                        topics.0,
                        Self::SIGNATURE_HASH,
                    ));
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <::alloy::sol_types::sol_data::Int<256> as alloy_sol_types::SolType>::tokenize(
                        &self.amount0,
                    ),
                    <::alloy::sol_types::sol_data::Int<256> as alloy_sol_types::SolType>::tokenize(
                        &self.amount1,
                    ),
                    <::alloy::sol_types::sol_data::Uint<160> as alloy_sol_types::SolType>::tokenize(
                        &self.sqrtPriceX96,
                    ),
                    <::alloy::sol_types::sol_data::Uint<128> as alloy_sol_types::SolType>::tokenize(
                        &self.liquidity,
                    ),
                    <::alloy::sol_types::sol_data::Int<24> as alloy_sol_types::SolType>::tokenize(
                        &self.tick,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.sender.clone(),
                    self.recipient.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(Self::SIGNATURE_HASH);
                out[1usize] = <::alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(&self.sender);
                out[2usize] = <::alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(&self.recipient);
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for Swap {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&Swap> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &Swap) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[allow(missing_docs)]
    #[doc = "Constructor`.\n```solidity\nconstructor();\n```"]
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct constructorCall {}
    const _: () = {
        use ::alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    #[allow(missing_docs)]
    #[doc = "Function with signature `burn(int24,int24,uint128)` and selector `0xa34123a7`.\n```solidity\nfunction burn(int24 tickLower, int24 tickUpper, uint128 amount) external returns (uint256 amount0, uint256 amount1);\n```"]
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct burnCall {
        pub tickLower: ::alloy::sol_types::private::primitives::aliases::I24,
        pub tickUpper: ::alloy::sol_types::private::primitives::aliases::I24,
        pub amount: u128,
    }
    #[allow(missing_docs)]
    #[doc = "Container type for the return parameters of the [`burn(int24,int24,uint128)`](burnCall) function."]
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct burnReturn {
        pub amount0: ::alloy::sol_types::private::primitives::aliases::U256,
        pub amount1: ::alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use ::alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                ::alloy::sol_types::sol_data::Int<24>,
                ::alloy::sol_types::sol_data::Int<24>,
                ::alloy::sol_types::sol_data::Uint<128>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                ::alloy::sol_types::private::primitives::aliases::I24,
                ::alloy::sol_types::private::primitives::aliases::I24,
                u128,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<burnCall> for UnderlyingRustTuple<'_> {
                fn from(value: burnCall) -> Self {
                    (value.tickLower, value.tickUpper, value.amount)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for burnCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        tickLower: tuple.0,
                        tickUpper: tuple.1,
                        amount: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                ::alloy::sol_types::sol_data::Uint<256>,
                ::alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                ::alloy::sol_types::private::primitives::aliases::U256,
                ::alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<burnReturn> for UnderlyingRustTuple<'_> {
                fn from(value: burnReturn) -> Self {
                    (value.amount0, value.amount1)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for burnReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        amount0: tuple.0,
                        amount1: tuple.1,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for burnCall {
            type Parameters<'a> = (
                ::alloy::sol_types::sol_data::Int<24>,
                ::alloy::sol_types::sol_data::Int<24>,
                ::alloy::sol_types::sol_data::Uint<128>,
            );
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = burnReturn;
            type ReturnTuple<'a> = (
                ::alloy::sol_types::sol_data::Uint<256>,
                ::alloy::sol_types::sol_data::Uint<256>,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "burn(int24,int24,uint128)";
            const SELECTOR: [u8; 4] = [163u8, 65u8, 35u8, 167u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <::alloy::sol_types::sol_data::Int<24> as alloy_sol_types::SolType>::tokenize(
                        &self.tickLower,
                    ),
                    <::alloy::sol_types::sol_data::Int<24> as alloy_sol_types::SolType>::tokenize(
                        &self.tickUpper,
                    ),
                    <::alloy::sol_types::sol_data::Uint<128> as alloy_sol_types::SolType>::tokenize(
                        &self.amount,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    #[allow(missing_docs)]
    #[doc = "Function with signature `collect(address,int24,int24,uint128,uint128)` and selector `0x4f1eb3d8`.\n```solidity\nfunction collect(address recipient, int24 tickLower, int24 tickUpper, uint128 amount0Requested, uint128 amount1Requested) external returns (uint128 amount0, uint128 amount1);\n```"]
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct collectCall {
        pub recipient: ::alloy::sol_types::private::Address,
        pub tickLower: ::alloy::sol_types::private::primitives::aliases::I24,
        pub tickUpper: ::alloy::sol_types::private::primitives::aliases::I24,
        pub amount0Requested: u128,
        pub amount1Requested: u128,
    }
    #[allow(missing_docs)]
    #[doc = "Container type for the return parameters of the [`collect(address,int24,int24,uint128,uint128)`](collectCall) function."]
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct collectReturn {
        pub amount0: u128,
        pub amount1: u128,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use ::alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                ::alloy::sol_types::sol_data::Address,
                ::alloy::sol_types::sol_data::Int<24>,
                ::alloy::sol_types::sol_data::Int<24>,
                ::alloy::sol_types::sol_data::Uint<128>,
                ::alloy::sol_types::sol_data::Uint<128>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                ::alloy::sol_types::private::Address,
                ::alloy::sol_types::private::primitives::aliases::I24,
                ::alloy::sol_types::private::primitives::aliases::I24,
                u128,
                u128,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<collectCall> for UnderlyingRustTuple<'_> {
                fn from(value: collectCall) -> Self {
                    (
                        value.recipient,
                        value.tickLower,
                        value.tickUpper,
                        value.amount0Requested,
                        value.amount1Requested,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for collectCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        recipient: tuple.0,
                        tickLower: tuple.1,
                        tickUpper: tuple.2,
                        amount0Requested: tuple.3,
                        amount1Requested: tuple.4,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                ::alloy::sol_types::sol_data::Uint<128>,
                ::alloy::sol_types::sol_data::Uint<128>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (u128, u128);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<collectReturn> for UnderlyingRustTuple<'_> {
                fn from(value: collectReturn) -> Self {
                    (value.amount0, value.amount1)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for collectReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        amount0: tuple.0,
                        amount1: tuple.1,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for collectCall {
            type Parameters<'a> = (
                ::alloy::sol_types::sol_data::Address,
                ::alloy::sol_types::sol_data::Int<24>,
                ::alloy::sol_types::sol_data::Int<24>,
                ::alloy::sol_types::sol_data::Uint<128>,
                ::alloy::sol_types::sol_data::Uint<128>,
            );
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = collectReturn;
            type ReturnTuple<'a> = (
                ::alloy::sol_types::sol_data::Uint<128>,
                ::alloy::sol_types::sol_data::Uint<128>,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "collect(address,int24,int24,uint128,uint128)";
            const SELECTOR: [u8; 4] = [79u8, 30u8, 179u8, 216u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <::alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.recipient,
                    ),
                    <::alloy::sol_types::sol_data::Int<24> as alloy_sol_types::SolType>::tokenize(
                        &self.tickLower,
                    ),
                    <::alloy::sol_types::sol_data::Int<24> as alloy_sol_types::SolType>::tokenize(
                        &self.tickUpper,
                    ),
                    <::alloy::sol_types::sol_data::Uint<128> as alloy_sol_types::SolType>::tokenize(
                        &self.amount0Requested,
                    ),
                    <::alloy::sol_types::sol_data::Uint<128> as alloy_sol_types::SolType>::tokenize(
                        &self.amount1Requested,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    #[allow(missing_docs)]
    #[doc = "Function with signature `collectProtocol(address,uint128,uint128)` and selector `0x85b66729`.\n```solidity\nfunction collectProtocol(address recipient, uint128 amount0Requested, uint128 amount1Requested) external returns (uint128 amount0, uint128 amount1);\n```"]
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct collectProtocolCall {
        pub recipient: ::alloy::sol_types::private::Address,
        pub amount0Requested: u128,
        pub amount1Requested: u128,
    }
    #[allow(missing_docs)]
    #[doc = "Container type for the return parameters of the [`collectProtocol(address,uint128,uint128)`](collectProtocolCall) function."]
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct collectProtocolReturn {
        pub amount0: u128,
        pub amount1: u128,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use ::alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                ::alloy::sol_types::sol_data::Address,
                ::alloy::sol_types::sol_data::Uint<128>,
                ::alloy::sol_types::sol_data::Uint<128>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (::alloy::sol_types::private::Address, u128, u128);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<collectProtocolCall> for UnderlyingRustTuple<'_> {
                fn from(value: collectProtocolCall) -> Self {
                    (
                        value.recipient,
                        value.amount0Requested,
                        value.amount1Requested,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for collectProtocolCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        recipient: tuple.0,
                        amount0Requested: tuple.1,
                        amount1Requested: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                ::alloy::sol_types::sol_data::Uint<128>,
                ::alloy::sol_types::sol_data::Uint<128>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (u128, u128);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<collectProtocolReturn> for UnderlyingRustTuple<'_> {
                fn from(value: collectProtocolReturn) -> Self {
                    (value.amount0, value.amount1)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for collectProtocolReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        amount0: tuple.0,
                        amount1: tuple.1,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for collectProtocolCall {
            type Parameters<'a> = (
                ::alloy::sol_types::sol_data::Address,
                ::alloy::sol_types::sol_data::Uint<128>,
                ::alloy::sol_types::sol_data::Uint<128>,
            );
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = collectProtocolReturn;
            type ReturnTuple<'a> = (
                ::alloy::sol_types::sol_data::Uint<128>,
                ::alloy::sol_types::sol_data::Uint<128>,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "collectProtocol(address,uint128,uint128)";
            const SELECTOR: [u8; 4] = [133u8, 182u8, 103u8, 41u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <::alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.recipient,
                    ),
                    <::alloy::sol_types::sol_data::Uint<128> as alloy_sol_types::SolType>::tokenize(
                        &self.amount0Requested,
                    ),
                    <::alloy::sol_types::sol_data::Uint<128> as alloy_sol_types::SolType>::tokenize(
                        &self.amount1Requested,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    #[allow(missing_docs)]
    #[doc = "Function with signature `factory()` and selector `0xc45a0155`.\n```solidity\nfunction factory() external view returns (address);\n```"]
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct factoryCall {}
    #[allow(missing_docs)]
    #[doc = "Container type for the return parameters of the [`factory()`](factoryCall) function."]
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct factoryReturn {
        pub _0: ::alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use ::alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<factoryCall> for UnderlyingRustTuple<'_> {
                fn from(value: factoryCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for factoryCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (::alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (::alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<factoryReturn> for UnderlyingRustTuple<'_> {
                fn from(value: factoryReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for factoryReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for factoryCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = factoryReturn;
            type ReturnTuple<'a> = (::alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "factory()";
            const SELECTOR: [u8; 4] = [196u8, 90u8, 1u8, 85u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    #[allow(missing_docs)]
    #[doc = "Function with signature `fee()` and selector `0xddca3f43`.\n```solidity\nfunction fee() external view returns (uint24);\n```"]
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct feeCall {}
    #[allow(missing_docs)]
    #[doc = "Container type for the return parameters of the [`fee()`](feeCall) function."]
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct feeReturn {
        pub _0: ::alloy::sol_types::private::primitives::aliases::U24,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use ::alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<feeCall> for UnderlyingRustTuple<'_> {
                fn from(value: feeCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for feeCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (::alloy::sol_types::sol_data::Uint<24>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (::alloy::sol_types::private::primitives::aliases::U24,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<feeReturn> for UnderlyingRustTuple<'_> {
                fn from(value: feeReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for feeReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for feeCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = feeReturn;
            type ReturnTuple<'a> = (::alloy::sol_types::sol_data::Uint<24>,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "fee()";
            const SELECTOR: [u8; 4] = [221u8, 202u8, 63u8, 67u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    #[allow(missing_docs)]
    #[doc = "Function with signature `feeGrowthGlobal0X128()` and selector `0xf3058399`.\n```solidity\nfunction feeGrowthGlobal0X128() external view returns (uint256);\n```"]
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct feeGrowthGlobal0X128Call {}
    #[allow(missing_docs)]
    #[doc = "Container type for the return parameters of the [`feeGrowthGlobal0X128()`](feeGrowthGlobal0X128Call) function."]
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct feeGrowthGlobal0X128Return {
        pub _0: ::alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use ::alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<feeGrowthGlobal0X128Call> for UnderlyingRustTuple<'_> {
                fn from(value: feeGrowthGlobal0X128Call) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for feeGrowthGlobal0X128Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (::alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> =
                (::alloy::sol_types::private::primitives::aliases::U256,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<feeGrowthGlobal0X128Return> for UnderlyingRustTuple<'_> {
                fn from(value: feeGrowthGlobal0X128Return) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for feeGrowthGlobal0X128Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for feeGrowthGlobal0X128Call {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = feeGrowthGlobal0X128Return;
            type ReturnTuple<'a> = (::alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "feeGrowthGlobal0X128()";
            const SELECTOR: [u8; 4] = [243u8, 5u8, 131u8, 153u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    #[allow(missing_docs)]
    #[doc = "Function with signature `feeGrowthGlobal1X128()` and selector `0x46141319`.\n```solidity\nfunction feeGrowthGlobal1X128() external view returns (uint256);\n```"]
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct feeGrowthGlobal1X128Call {}
    #[allow(missing_docs)]
    #[doc = "Container type for the return parameters of the [`feeGrowthGlobal1X128()`](feeGrowthGlobal1X128Call) function."]
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct feeGrowthGlobal1X128Return {
        pub _0: ::alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use ::alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<feeGrowthGlobal1X128Call> for UnderlyingRustTuple<'_> {
                fn from(value: feeGrowthGlobal1X128Call) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for feeGrowthGlobal1X128Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (::alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> =
                (::alloy::sol_types::private::primitives::aliases::U256,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<feeGrowthGlobal1X128Return> for UnderlyingRustTuple<'_> {
                fn from(value: feeGrowthGlobal1X128Return) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for feeGrowthGlobal1X128Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for feeGrowthGlobal1X128Call {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = feeGrowthGlobal1X128Return;
            type ReturnTuple<'a> = (::alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "feeGrowthGlobal1X128()";
            const SELECTOR: [u8; 4] = [70u8, 20u8, 19u8, 25u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    #[allow(missing_docs)]
    #[doc = "Function with signature `flash(address,uint256,uint256,bytes)` and selector `0x490e6cbc`.\n```solidity\nfunction flash(address recipient, uint256 amount0, uint256 amount1, bytes memory data) external;\n```"]
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct flashCall {
        pub recipient: ::alloy::sol_types::private::Address,
        pub amount0: ::alloy::sol_types::private::primitives::aliases::U256,
        pub amount1: ::alloy::sol_types::private::primitives::aliases::U256,
        pub data: ::alloy::sol_types::private::Bytes,
    }
    #[allow(missing_docs)]
    #[doc = "Container type for the return parameters of the [`flash(address,uint256,uint256,bytes)`](flashCall) function."]
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct flashReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use ::alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                ::alloy::sol_types::sol_data::Address,
                ::alloy::sol_types::sol_data::Uint<256>,
                ::alloy::sol_types::sol_data::Uint<256>,
                ::alloy::sol_types::sol_data::Bytes,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                ::alloy::sol_types::private::Address,
                ::alloy::sol_types::private::primitives::aliases::U256,
                ::alloy::sol_types::private::primitives::aliases::U256,
                ::alloy::sol_types::private::Bytes,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<flashCall> for UnderlyingRustTuple<'_> {
                fn from(value: flashCall) -> Self {
                    (value.recipient, value.amount0, value.amount1, value.data)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for flashCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        recipient: tuple.0,
                        amount0: tuple.1,
                        amount1: tuple.2,
                        data: tuple.3,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<flashReturn> for UnderlyingRustTuple<'_> {
                fn from(value: flashReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for flashReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for flashCall {
            type Parameters<'a> = (
                ::alloy::sol_types::sol_data::Address,
                ::alloy::sol_types::sol_data::Uint<256>,
                ::alloy::sol_types::sol_data::Uint<256>,
                ::alloy::sol_types::sol_data::Bytes,
            );
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = flashReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "flash(address,uint256,uint256,bytes)";
            const SELECTOR: [u8; 4] = [73u8, 14u8, 108u8, 188u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <::alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.recipient,
                    ),
                    <::alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.amount0,
                    ),
                    <::alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.amount1,
                    ),
                    <::alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    #[allow(missing_docs)]
    #[doc = "Function with signature `increaseObservationCardinalityNext(uint16)` and selector `0x32148f67`.\n```solidity\nfunction increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\n```"]
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct increaseObservationCardinalityNextCall {
        pub observationCardinalityNext: u16,
    }
    #[allow(missing_docs)]
    #[doc = "Container type for the return parameters of the [`increaseObservationCardinalityNext(uint16)`](increaseObservationCardinalityNextCall) function."]
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct increaseObservationCardinalityNextReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use ::alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (::alloy::sol_types::sol_data::Uint<16>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (u16,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<increaseObservationCardinalityNextCall> for UnderlyingRustTuple<'_> {
                fn from(value: increaseObservationCardinalityNextCall) -> Self {
                    (value.observationCardinalityNext,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for increaseObservationCardinalityNextCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        observationCardinalityNext: tuple.0,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<increaseObservationCardinalityNextReturn> for UnderlyingRustTuple<'_> {
                fn from(value: increaseObservationCardinalityNextReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for increaseObservationCardinalityNextReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for increaseObservationCardinalityNextCall {
            type Parameters<'a> = (::alloy::sol_types::sol_data::Uint<16>,);
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = increaseObservationCardinalityNextReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "increaseObservationCardinalityNext(uint16)";
            const SELECTOR: [u8; 4] = [50u8, 20u8, 143u8, 103u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <::alloy::sol_types::sol_data::Uint<16> as alloy_sol_types::SolType>::tokenize(
                        &self.observationCardinalityNext,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    #[allow(missing_docs)]
    #[doc = "Function with signature `initialize(uint160)` and selector `0xf637731d`.\n```solidity\nfunction initialize(uint160 sqrtPriceX96) external;\n```"]
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct initializeCall {
        pub sqrtPriceX96: ::alloy::sol_types::private::primitives::aliases::U160,
    }
    #[allow(missing_docs)]
    #[doc = "Container type for the return parameters of the [`initialize(uint160)`](initializeCall) function."]
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct initializeReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use ::alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (::alloy::sol_types::sol_data::Uint<160>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> =
                (::alloy::sol_types::private::primitives::aliases::U160,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<initializeCall> for UnderlyingRustTuple<'_> {
                fn from(value: initializeCall) -> Self {
                    (value.sqrtPriceX96,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for initializeCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        sqrtPriceX96: tuple.0,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<initializeReturn> for UnderlyingRustTuple<'_> {
                fn from(value: initializeReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for initializeReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for initializeCall {
            type Parameters<'a> = (::alloy::sol_types::sol_data::Uint<160>,);
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = initializeReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "initialize(uint160)";
            const SELECTOR: [u8; 4] = [246u8, 55u8, 115u8, 29u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <::alloy::sol_types::sol_data::Uint<160> as alloy_sol_types::SolType>::tokenize(
                        &self.sqrtPriceX96,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    #[allow(missing_docs)]
    #[doc = "Function with signature `liquidity()` and selector `0x1a686502`.\n```solidity\nfunction liquidity() external view returns (uint128);\n```"]
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct liquidityCall {}
    #[allow(missing_docs)]
    #[doc = "Container type for the return parameters of the [`liquidity()`](liquidityCall) function."]
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct liquidityReturn {
        pub _0: u128,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use ::alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<liquidityCall> for UnderlyingRustTuple<'_> {
                fn from(value: liquidityCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for liquidityCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (::alloy::sol_types::sol_data::Uint<128>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (u128,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<liquidityReturn> for UnderlyingRustTuple<'_> {
                fn from(value: liquidityReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for liquidityReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for liquidityCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = liquidityReturn;
            type ReturnTuple<'a> = (::alloy::sol_types::sol_data::Uint<128>,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "liquidity()";
            const SELECTOR: [u8; 4] = [26u8, 104u8, 101u8, 2u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    #[allow(missing_docs)]
    #[doc = "Function with signature `maxLiquidityPerTick()` and selector `0x70cf754a`.\n```solidity\nfunction maxLiquidityPerTick() external view returns (uint128);\n```"]
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct maxLiquidityPerTickCall {}
    #[allow(missing_docs)]
    #[doc = "Container type for the return parameters of the [`maxLiquidityPerTick()`](maxLiquidityPerTickCall) function."]
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct maxLiquidityPerTickReturn {
        pub _0: u128,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use ::alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<maxLiquidityPerTickCall> for UnderlyingRustTuple<'_> {
                fn from(value: maxLiquidityPerTickCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for maxLiquidityPerTickCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (::alloy::sol_types::sol_data::Uint<128>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (u128,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<maxLiquidityPerTickReturn> for UnderlyingRustTuple<'_> {
                fn from(value: maxLiquidityPerTickReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for maxLiquidityPerTickReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for maxLiquidityPerTickCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = maxLiquidityPerTickReturn;
            type ReturnTuple<'a> = (::alloy::sol_types::sol_data::Uint<128>,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "maxLiquidityPerTick()";
            const SELECTOR: [u8; 4] = [112u8, 207u8, 117u8, 74u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    #[allow(missing_docs)]
    #[doc = "Function with signature `mint(address,int24,int24,uint128,bytes)` and selector `0x3c8a7d8d`.\n```solidity\nfunction mint(address recipient, int24 tickLower, int24 tickUpper, uint128 amount, bytes memory data) external returns (uint256 amount0, uint256 amount1);\n```"]
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct mintCall {
        pub recipient: ::alloy::sol_types::private::Address,
        pub tickLower: ::alloy::sol_types::private::primitives::aliases::I24,
        pub tickUpper: ::alloy::sol_types::private::primitives::aliases::I24,
        pub amount: u128,
        pub data: ::alloy::sol_types::private::Bytes,
    }
    #[allow(missing_docs)]
    #[doc = "Container type for the return parameters of the [`mint(address,int24,int24,uint128,bytes)`](mintCall) function."]
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct mintReturn {
        pub amount0: ::alloy::sol_types::private::primitives::aliases::U256,
        pub amount1: ::alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use ::alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                ::alloy::sol_types::sol_data::Address,
                ::alloy::sol_types::sol_data::Int<24>,
                ::alloy::sol_types::sol_data::Int<24>,
                ::alloy::sol_types::sol_data::Uint<128>,
                ::alloy::sol_types::sol_data::Bytes,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                ::alloy::sol_types::private::Address,
                ::alloy::sol_types::private::primitives::aliases::I24,
                ::alloy::sol_types::private::primitives::aliases::I24,
                u128,
                ::alloy::sol_types::private::Bytes,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<mintCall> for UnderlyingRustTuple<'_> {
                fn from(value: mintCall) -> Self {
                    (
                        value.recipient,
                        value.tickLower,
                        value.tickUpper,
                        value.amount,
                        value.data,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for mintCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        recipient: tuple.0,
                        tickLower: tuple.1,
                        tickUpper: tuple.2,
                        amount: tuple.3,
                        data: tuple.4,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                ::alloy::sol_types::sol_data::Uint<256>,
                ::alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                ::alloy::sol_types::private::primitives::aliases::U256,
                ::alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<mintReturn> for UnderlyingRustTuple<'_> {
                fn from(value: mintReturn) -> Self {
                    (value.amount0, value.amount1)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for mintReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        amount0: tuple.0,
                        amount1: tuple.1,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for mintCall {
            type Parameters<'a> = (
                ::alloy::sol_types::sol_data::Address,
                ::alloy::sol_types::sol_data::Int<24>,
                ::alloy::sol_types::sol_data::Int<24>,
                ::alloy::sol_types::sol_data::Uint<128>,
                ::alloy::sol_types::sol_data::Bytes,
            );
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = mintReturn;
            type ReturnTuple<'a> = (
                ::alloy::sol_types::sol_data::Uint<256>,
                ::alloy::sol_types::sol_data::Uint<256>,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "mint(address,int24,int24,uint128,bytes)";
            const SELECTOR: [u8; 4] = [60u8, 138u8, 125u8, 141u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <::alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.recipient,
                    ),
                    <::alloy::sol_types::sol_data::Int<24> as alloy_sol_types::SolType>::tokenize(
                        &self.tickLower,
                    ),
                    <::alloy::sol_types::sol_data::Int<24> as alloy_sol_types::SolType>::tokenize(
                        &self.tickUpper,
                    ),
                    <::alloy::sol_types::sol_data::Uint<128> as alloy_sol_types::SolType>::tokenize(
                        &self.amount,
                    ),
                    <::alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    #[allow(missing_docs)]
    #[doc = "Function with signature `observations(uint256)` and selector `0x252c09d7`.\n```solidity\nfunction observations(uint256) external view returns (uint32 blockTimestamp, int56 tickCumulative, uint160 secondsPerLiquidityCumulativeX128, bool initialized);\n```"]
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct observationsCall {
        pub _0: ::alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(missing_docs)]
    #[doc = "Container type for the return parameters of the [`observations(uint256)`](observationsCall) function."]
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct observationsReturn {
        pub blockTimestamp: u32,
        pub tickCumulative: ::alloy::sol_types::private::primitives::aliases::I56,
        pub secondsPerLiquidityCumulativeX128:
            ::alloy::sol_types::private::primitives::aliases::U160,
        pub initialized: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use ::alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (::alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> =
                (::alloy::sol_types::private::primitives::aliases::U256,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<observationsCall> for UnderlyingRustTuple<'_> {
                fn from(value: observationsCall) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for observationsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                ::alloy::sol_types::sol_data::Uint<32>,
                ::alloy::sol_types::sol_data::Int<56>,
                ::alloy::sol_types::sol_data::Uint<160>,
                ::alloy::sol_types::sol_data::Bool,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                u32,
                ::alloy::sol_types::private::primitives::aliases::I56,
                ::alloy::sol_types::private::primitives::aliases::U160,
                bool,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<observationsReturn> for UnderlyingRustTuple<'_> {
                fn from(value: observationsReturn) -> Self {
                    (
                        value.blockTimestamp,
                        value.tickCumulative,
                        value.secondsPerLiquidityCumulativeX128,
                        value.initialized,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for observationsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        blockTimestamp: tuple.0,
                        tickCumulative: tuple.1,
                        secondsPerLiquidityCumulativeX128: tuple.2,
                        initialized: tuple.3,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for observationsCall {
            type Parameters<'a> = (::alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = observationsReturn;
            type ReturnTuple<'a> = (
                ::alloy::sol_types::sol_data::Uint<32>,
                ::alloy::sol_types::sol_data::Int<56>,
                ::alloy::sol_types::sol_data::Uint<160>,
                ::alloy::sol_types::sol_data::Bool,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "observations(uint256)";
            const SELECTOR: [u8; 4] = [37u8, 44u8, 9u8, 215u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <::alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self._0,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    #[allow(missing_docs)]
    #[doc = "Function with signature `observe(uint32[])` and selector `0x883bdbfd`.\n```solidity\nfunction observe(uint32[] memory secondsAgos) external view returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\n```"]
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct observeCall {
        pub secondsAgos: ::alloy::sol_types::private::Vec<u32>,
    }
    #[allow(missing_docs)]
    #[doc = "Container type for the return parameters of the [`observe(uint32[])`](observeCall) function."]
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct observeReturn {
        pub tickCumulatives:
            ::alloy::sol_types::private::Vec<::alloy::sol_types::private::primitives::aliases::I56>,
        pub secondsPerLiquidityCumulativeX128s: ::alloy::sol_types::private::Vec<
            ::alloy::sol_types::private::primitives::aliases::U160,
        >,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use ::alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> =
                (::alloy::sol_types::sol_data::Array<::alloy::sol_types::sol_data::Uint<32>>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (::alloy::sol_types::private::Vec<u32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<observeCall> for UnderlyingRustTuple<'_> {
                fn from(value: observeCall) -> Self {
                    (value.secondsAgos,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for observeCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        secondsAgos: tuple.0,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                ::alloy::sol_types::sol_data::Array<::alloy::sol_types::sol_data::Int<56>>,
                ::alloy::sol_types::sol_data::Array<::alloy::sol_types::sol_data::Uint<160>>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                ::alloy::sol_types::private::Vec<
                    ::alloy::sol_types::private::primitives::aliases::I56,
                >,
                ::alloy::sol_types::private::Vec<
                    ::alloy::sol_types::private::primitives::aliases::U160,
                >,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<observeReturn> for UnderlyingRustTuple<'_> {
                fn from(value: observeReturn) -> Self {
                    (
                        value.tickCumulatives,
                        value.secondsPerLiquidityCumulativeX128s,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for observeReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        tickCumulatives: tuple.0,
                        secondsPerLiquidityCumulativeX128s: tuple.1,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for observeCall {
            type Parameters<'a> =
                (::alloy::sol_types::sol_data::Array<::alloy::sol_types::sol_data::Uint<32>>,);
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = observeReturn;
            type ReturnTuple<'a> = (
                ::alloy::sol_types::sol_data::Array<::alloy::sol_types::sol_data::Int<56>>,
                ::alloy::sol_types::sol_data::Array<::alloy::sol_types::sol_data::Uint<160>>,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "observe(uint32[])";
            const SELECTOR: [u8; 4] = [136u8, 59u8, 219u8, 253u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (<::alloy::sol_types::sol_data::Array<
                    ::alloy::sol_types::sol_data::Uint<32>,
                > as alloy_sol_types::SolType>::tokenize(
                    &self.secondsAgos
                ),)
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    #[allow(missing_docs)]
    #[doc = "Function with signature `positions(bytes32)` and selector `0x514ea4bf`.\n```solidity\nfunction positions(bytes32) external view returns (uint128 liquidity, uint256 feeGrowthInside0LastX128, uint256 feeGrowthInside1LastX128, uint128 tokensOwed0, uint128 tokensOwed1);\n```"]
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct positionsCall {
        pub _0: ::alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(missing_docs)]
    #[doc = "Container type for the return parameters of the [`positions(bytes32)`](positionsCall) function."]
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct positionsReturn {
        pub liquidity: u128,
        pub feeGrowthInside0LastX128: ::alloy::sol_types::private::primitives::aliases::U256,
        pub feeGrowthInside1LastX128: ::alloy::sol_types::private::primitives::aliases::U256,
        pub tokensOwed0: u128,
        pub tokensOwed1: u128,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use ::alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (::alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (::alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<positionsCall> for UnderlyingRustTuple<'_> {
                fn from(value: positionsCall) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for positionsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                ::alloy::sol_types::sol_data::Uint<128>,
                ::alloy::sol_types::sol_data::Uint<256>,
                ::alloy::sol_types::sol_data::Uint<256>,
                ::alloy::sol_types::sol_data::Uint<128>,
                ::alloy::sol_types::sol_data::Uint<128>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                u128,
                ::alloy::sol_types::private::primitives::aliases::U256,
                ::alloy::sol_types::private::primitives::aliases::U256,
                u128,
                u128,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<positionsReturn> for UnderlyingRustTuple<'_> {
                fn from(value: positionsReturn) -> Self {
                    (
                        value.liquidity,
                        value.feeGrowthInside0LastX128,
                        value.feeGrowthInside1LastX128,
                        value.tokensOwed0,
                        value.tokensOwed1,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for positionsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        liquidity: tuple.0,
                        feeGrowthInside0LastX128: tuple.1,
                        feeGrowthInside1LastX128: tuple.2,
                        tokensOwed0: tuple.3,
                        tokensOwed1: tuple.4,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for positionsCall {
            type Parameters<'a> = (::alloy::sol_types::sol_data::FixedBytes<32>,);
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = positionsReturn;
            type ReturnTuple<'a> = (
                ::alloy::sol_types::sol_data::Uint<128>,
                ::alloy::sol_types::sol_data::Uint<256>,
                ::alloy::sol_types::sol_data::Uint<256>,
                ::alloy::sol_types::sol_data::Uint<128>,
                ::alloy::sol_types::sol_data::Uint<128>,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "positions(bytes32)";
            const SELECTOR: [u8; 4] = [81u8, 78u8, 164u8, 191u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (<::alloy::sol_types::sol_data::FixedBytes<32> as alloy_sol_types::SolType>::tokenize(&self._0),)
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    #[allow(missing_docs)]
    #[doc = "Function with signature `protocolFees()` and selector `0x1ad8b03b`.\n```solidity\nfunction protocolFees() external view returns (uint128 token0, uint128 token1);\n```"]
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct protocolFeesCall {}
    #[allow(missing_docs)]
    #[doc = "Container type for the return parameters of the [`protocolFees()`](protocolFeesCall) function."]
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct protocolFeesReturn {
        pub token0: u128,
        pub token1: u128,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use ::alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<protocolFeesCall> for UnderlyingRustTuple<'_> {
                fn from(value: protocolFeesCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for protocolFeesCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                ::alloy::sol_types::sol_data::Uint<128>,
                ::alloy::sol_types::sol_data::Uint<128>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (u128, u128);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<protocolFeesReturn> for UnderlyingRustTuple<'_> {
                fn from(value: protocolFeesReturn) -> Self {
                    (value.token0, value.token1)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for protocolFeesReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        token0: tuple.0,
                        token1: tuple.1,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for protocolFeesCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = protocolFeesReturn;
            type ReturnTuple<'a> = (
                ::alloy::sol_types::sol_data::Uint<128>,
                ::alloy::sol_types::sol_data::Uint<128>,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "protocolFees()";
            const SELECTOR: [u8; 4] = [26u8, 216u8, 176u8, 59u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    #[allow(missing_docs)]
    #[doc = "Function with signature `setFeeProtocol(uint8,uint8)` and selector `0x8206a4d1`.\n```solidity\nfunction setFeeProtocol(uint8 feeProtocol0, uint8 feeProtocol1) external;\n```"]
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setFeeProtocolCall {
        pub feeProtocol0: u8,
        pub feeProtocol1: u8,
    }
    #[allow(missing_docs)]
    #[doc = "Container type for the return parameters of the [`setFeeProtocol(uint8,uint8)`](setFeeProtocolCall) function."]
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setFeeProtocolReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use ::alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                ::alloy::sol_types::sol_data::Uint<8>,
                ::alloy::sol_types::sol_data::Uint<8>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (u8, u8);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setFeeProtocolCall> for UnderlyingRustTuple<'_> {
                fn from(value: setFeeProtocolCall) -> Self {
                    (value.feeProtocol0, value.feeProtocol1)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setFeeProtocolCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        feeProtocol0: tuple.0,
                        feeProtocol1: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setFeeProtocolReturn> for UnderlyingRustTuple<'_> {
                fn from(value: setFeeProtocolReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setFeeProtocolReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setFeeProtocolCall {
            type Parameters<'a> = (
                ::alloy::sol_types::sol_data::Uint<8>,
                ::alloy::sol_types::sol_data::Uint<8>,
            );
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = setFeeProtocolReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setFeeProtocol(uint8,uint8)";
            const SELECTOR: [u8; 4] = [130u8, 6u8, 164u8, 209u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <::alloy::sol_types::sol_data::Uint<8> as alloy_sol_types::SolType>::tokenize(
                        &self.feeProtocol0,
                    ),
                    <::alloy::sol_types::sol_data::Uint<8> as alloy_sol_types::SolType>::tokenize(
                        &self.feeProtocol1,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    #[allow(missing_docs)]
    #[doc = "Function with signature `slot0()` and selector `0x3850c7bd`.\n```solidity\nfunction slot0() external view returns (uint160 sqrtPriceX96, int24 tick, uint16 observationIndex, uint16 observationCardinality, uint16 observationCardinalityNext, uint8 feeProtocol, bool unlocked);\n```"]
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct slot0Call {}
    #[allow(missing_docs)]
    #[doc = "Container type for the return parameters of the [`slot0()`](slot0Call) function."]
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct slot0Return {
        pub sqrtPriceX96: ::alloy::sol_types::private::primitives::aliases::U160,
        pub tick: ::alloy::sol_types::private::primitives::aliases::I24,
        pub observationIndex: u16,
        pub observationCardinality: u16,
        pub observationCardinalityNext: u16,
        pub feeProtocol: u8,
        pub unlocked: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use ::alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<slot0Call> for UnderlyingRustTuple<'_> {
                fn from(value: slot0Call) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for slot0Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                ::alloy::sol_types::sol_data::Uint<160>,
                ::alloy::sol_types::sol_data::Int<24>,
                ::alloy::sol_types::sol_data::Uint<16>,
                ::alloy::sol_types::sol_data::Uint<16>,
                ::alloy::sol_types::sol_data::Uint<16>,
                ::alloy::sol_types::sol_data::Uint<8>,
                ::alloy::sol_types::sol_data::Bool,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                ::alloy::sol_types::private::primitives::aliases::U160,
                ::alloy::sol_types::private::primitives::aliases::I24,
                u16,
                u16,
                u16,
                u8,
                bool,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<slot0Return> for UnderlyingRustTuple<'_> {
                fn from(value: slot0Return) -> Self {
                    (
                        value.sqrtPriceX96,
                        value.tick,
                        value.observationIndex,
                        value.observationCardinality,
                        value.observationCardinalityNext,
                        value.feeProtocol,
                        value.unlocked,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for slot0Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        sqrtPriceX96: tuple.0,
                        tick: tuple.1,
                        observationIndex: tuple.2,
                        observationCardinality: tuple.3,
                        observationCardinalityNext: tuple.4,
                        feeProtocol: tuple.5,
                        unlocked: tuple.6,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for slot0Call {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = slot0Return;
            type ReturnTuple<'a> = (
                ::alloy::sol_types::sol_data::Uint<160>,
                ::alloy::sol_types::sol_data::Int<24>,
                ::alloy::sol_types::sol_data::Uint<16>,
                ::alloy::sol_types::sol_data::Uint<16>,
                ::alloy::sol_types::sol_data::Uint<16>,
                ::alloy::sol_types::sol_data::Uint<8>,
                ::alloy::sol_types::sol_data::Bool,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "slot0()";
            const SELECTOR: [u8; 4] = [56u8, 80u8, 199u8, 189u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    #[allow(missing_docs)]
    #[doc = "Function with signature `snapshotCumulativesInside(int24,int24)` and selector `0xa38807f2`.\n```solidity\nfunction snapshotCumulativesInside(int24 tickLower, int24 tickUpper) external view returns (int56 tickCumulativeInside, uint160 secondsPerLiquidityInsideX128, uint32 secondsInside);\n```"]
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct snapshotCumulativesInsideCall {
        pub tickLower: ::alloy::sol_types::private::primitives::aliases::I24,
        pub tickUpper: ::alloy::sol_types::private::primitives::aliases::I24,
    }
    #[allow(missing_docs)]
    #[doc = "Container type for the return parameters of the [`snapshotCumulativesInside(int24,int24)`](snapshotCumulativesInsideCall) function."]
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct snapshotCumulativesInsideReturn {
        pub tickCumulativeInside: ::alloy::sol_types::private::primitives::aliases::I56,
        pub secondsPerLiquidityInsideX128: ::alloy::sol_types::private::primitives::aliases::U160,
        pub secondsInside: u32,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use ::alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                ::alloy::sol_types::sol_data::Int<24>,
                ::alloy::sol_types::sol_data::Int<24>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                ::alloy::sol_types::private::primitives::aliases::I24,
                ::alloy::sol_types::private::primitives::aliases::I24,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<snapshotCumulativesInsideCall> for UnderlyingRustTuple<'_> {
                fn from(value: snapshotCumulativesInsideCall) -> Self {
                    (value.tickLower, value.tickUpper)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for snapshotCumulativesInsideCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        tickLower: tuple.0,
                        tickUpper: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                ::alloy::sol_types::sol_data::Int<56>,
                ::alloy::sol_types::sol_data::Uint<160>,
                ::alloy::sol_types::sol_data::Uint<32>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                ::alloy::sol_types::private::primitives::aliases::I56,
                ::alloy::sol_types::private::primitives::aliases::U160,
                u32,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<snapshotCumulativesInsideReturn> for UnderlyingRustTuple<'_> {
                fn from(value: snapshotCumulativesInsideReturn) -> Self {
                    (
                        value.tickCumulativeInside,
                        value.secondsPerLiquidityInsideX128,
                        value.secondsInside,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for snapshotCumulativesInsideReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        tickCumulativeInside: tuple.0,
                        secondsPerLiquidityInsideX128: tuple.1,
                        secondsInside: tuple.2,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for snapshotCumulativesInsideCall {
            type Parameters<'a> = (
                ::alloy::sol_types::sol_data::Int<24>,
                ::alloy::sol_types::sol_data::Int<24>,
            );
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = snapshotCumulativesInsideReturn;
            type ReturnTuple<'a> = (
                ::alloy::sol_types::sol_data::Int<56>,
                ::alloy::sol_types::sol_data::Uint<160>,
                ::alloy::sol_types::sol_data::Uint<32>,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "snapshotCumulativesInside(int24,int24)";
            const SELECTOR: [u8; 4] = [163u8, 136u8, 7u8, 242u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <::alloy::sol_types::sol_data::Int<24> as alloy_sol_types::SolType>::tokenize(
                        &self.tickLower,
                    ),
                    <::alloy::sol_types::sol_data::Int<24> as alloy_sol_types::SolType>::tokenize(
                        &self.tickUpper,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    #[allow(missing_docs)]
    #[doc = "Function with signature `swap(address,bool,int256,uint160,bytes)` and selector `0x128acb08`.\n```solidity\nfunction swap(address recipient, bool zeroForOne, int256 amountSpecified, uint160 sqrtPriceLimitX96, bytes memory data) external returns (int256 amount0, int256 amount1);\n```"]
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct swapCall {
        pub recipient: ::alloy::sol_types::private::Address,
        pub zeroForOne: bool,
        pub amountSpecified: ::alloy::sol_types::private::primitives::aliases::I256,
        pub sqrtPriceLimitX96: ::alloy::sol_types::private::primitives::aliases::U160,
        pub data: ::alloy::sol_types::private::Bytes,
    }
    #[allow(missing_docs)]
    #[doc = "Container type for the return parameters of the [`swap(address,bool,int256,uint160,bytes)`](swapCall) function."]
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct swapReturn {
        pub amount0: ::alloy::sol_types::private::primitives::aliases::I256,
        pub amount1: ::alloy::sol_types::private::primitives::aliases::I256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use ::alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                ::alloy::sol_types::sol_data::Address,
                ::alloy::sol_types::sol_data::Bool,
                ::alloy::sol_types::sol_data::Int<256>,
                ::alloy::sol_types::sol_data::Uint<160>,
                ::alloy::sol_types::sol_data::Bytes,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                ::alloy::sol_types::private::Address,
                bool,
                ::alloy::sol_types::private::primitives::aliases::I256,
                ::alloy::sol_types::private::primitives::aliases::U160,
                ::alloy::sol_types::private::Bytes,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<swapCall> for UnderlyingRustTuple<'_> {
                fn from(value: swapCall) -> Self {
                    (
                        value.recipient,
                        value.zeroForOne,
                        value.amountSpecified,
                        value.sqrtPriceLimitX96,
                        value.data,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for swapCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        recipient: tuple.0,
                        zeroForOne: tuple.1,
                        amountSpecified: tuple.2,
                        sqrtPriceLimitX96: tuple.3,
                        data: tuple.4,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                ::alloy::sol_types::sol_data::Int<256>,
                ::alloy::sol_types::sol_data::Int<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                ::alloy::sol_types::private::primitives::aliases::I256,
                ::alloy::sol_types::private::primitives::aliases::I256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<swapReturn> for UnderlyingRustTuple<'_> {
                fn from(value: swapReturn) -> Self {
                    (value.amount0, value.amount1)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for swapReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        amount0: tuple.0,
                        amount1: tuple.1,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for swapCall {
            type Parameters<'a> = (
                ::alloy::sol_types::sol_data::Address,
                ::alloy::sol_types::sol_data::Bool,
                ::alloy::sol_types::sol_data::Int<256>,
                ::alloy::sol_types::sol_data::Uint<160>,
                ::alloy::sol_types::sol_data::Bytes,
            );
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = swapReturn;
            type ReturnTuple<'a> = (
                ::alloy::sol_types::sol_data::Int<256>,
                ::alloy::sol_types::sol_data::Int<256>,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "swap(address,bool,int256,uint160,bytes)";
            const SELECTOR: [u8; 4] = [18u8, 138u8, 203u8, 8u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <::alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.recipient,
                    ),
                    <::alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        &self.zeroForOne,
                    ),
                    <::alloy::sol_types::sol_data::Int<256> as alloy_sol_types::SolType>::tokenize(
                        &self.amountSpecified,
                    ),
                    <::alloy::sol_types::sol_data::Uint<160> as alloy_sol_types::SolType>::tokenize(
                        &self.sqrtPriceLimitX96,
                    ),
                    <::alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    #[allow(missing_docs)]
    #[doc = "Function with signature `tickBitmap(int16)` and selector `0x5339c296`.\n```solidity\nfunction tickBitmap(int16) external view returns (uint256);\n```"]
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct tickBitmapCall {
        pub _0: i16,
    }
    #[allow(missing_docs)]
    #[doc = "Container type for the return parameters of the [`tickBitmap(int16)`](tickBitmapCall) function."]
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct tickBitmapReturn {
        pub _0: ::alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use ::alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (::alloy::sol_types::sol_data::Int<16>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (i16,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<tickBitmapCall> for UnderlyingRustTuple<'_> {
                fn from(value: tickBitmapCall) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for tickBitmapCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (::alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> =
                (::alloy::sol_types::private::primitives::aliases::U256,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<tickBitmapReturn> for UnderlyingRustTuple<'_> {
                fn from(value: tickBitmapReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for tickBitmapReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for tickBitmapCall {
            type Parameters<'a> = (::alloy::sol_types::sol_data::Int<16>,);
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = tickBitmapReturn;
            type ReturnTuple<'a> = (::alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "tickBitmap(int16)";
            const SELECTOR: [u8; 4] = [83u8, 57u8, 194u8, 150u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <::alloy::sol_types::sol_data::Int<16> as alloy_sol_types::SolType>::tokenize(
                        &self._0,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    #[allow(missing_docs)]
    #[doc = "Function with signature `tickSpacing()` and selector `0xd0c93a7c`.\n```solidity\nfunction tickSpacing() external view returns (int24);\n```"]
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct tickSpacingCall {}
    #[allow(missing_docs)]
    #[doc = "Container type for the return parameters of the [`tickSpacing()`](tickSpacingCall) function."]
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct tickSpacingReturn {
        pub _0: ::alloy::sol_types::private::primitives::aliases::I24,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use ::alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<tickSpacingCall> for UnderlyingRustTuple<'_> {
                fn from(value: tickSpacingCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for tickSpacingCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (::alloy::sol_types::sol_data::Int<24>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (::alloy::sol_types::private::primitives::aliases::I24,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<tickSpacingReturn> for UnderlyingRustTuple<'_> {
                fn from(value: tickSpacingReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for tickSpacingReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for tickSpacingCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = tickSpacingReturn;
            type ReturnTuple<'a> = (::alloy::sol_types::sol_data::Int<24>,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "tickSpacing()";
            const SELECTOR: [u8; 4] = [208u8, 201u8, 58u8, 124u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    #[allow(missing_docs)]
    #[doc = "Function with signature `ticks(int24)` and selector `0xf30dba93`.\n```solidity\nfunction ticks(int24) external view returns (uint128 liquidityGross, int128 liquidityNet, uint256 feeGrowthOutside0X128, uint256 feeGrowthOutside1X128, int56 tickCumulativeOutside, uint160 secondsPerLiquidityOutsideX128, uint32 secondsOutside, bool initialized);\n```"]
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ticksCall {
        pub _0: ::alloy::sol_types::private::primitives::aliases::I24,
    }
    #[allow(missing_docs)]
    #[doc = "Container type for the return parameters of the [`ticks(int24)`](ticksCall) function."]
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ticksReturn {
        pub liquidityGross: u128,
        pub liquidityNet: i128,
        pub feeGrowthOutside0X128: ::alloy::sol_types::private::primitives::aliases::U256,
        pub feeGrowthOutside1X128: ::alloy::sol_types::private::primitives::aliases::U256,
        pub tickCumulativeOutside: ::alloy::sol_types::private::primitives::aliases::I56,
        pub secondsPerLiquidityOutsideX128: ::alloy::sol_types::private::primitives::aliases::U160,
        pub secondsOutside: u32,
        pub initialized: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use ::alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (::alloy::sol_types::sol_data::Int<24>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (::alloy::sol_types::private::primitives::aliases::I24,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ticksCall> for UnderlyingRustTuple<'_> {
                fn from(value: ticksCall) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ticksCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                ::alloy::sol_types::sol_data::Uint<128>,
                ::alloy::sol_types::sol_data::Int<128>,
                ::alloy::sol_types::sol_data::Uint<256>,
                ::alloy::sol_types::sol_data::Uint<256>,
                ::alloy::sol_types::sol_data::Int<56>,
                ::alloy::sol_types::sol_data::Uint<160>,
                ::alloy::sol_types::sol_data::Uint<32>,
                ::alloy::sol_types::sol_data::Bool,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                u128,
                i128,
                ::alloy::sol_types::private::primitives::aliases::U256,
                ::alloy::sol_types::private::primitives::aliases::U256,
                ::alloy::sol_types::private::primitives::aliases::I56,
                ::alloy::sol_types::private::primitives::aliases::U160,
                u32,
                bool,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ticksReturn> for UnderlyingRustTuple<'_> {
                fn from(value: ticksReturn) -> Self {
                    (
                        value.liquidityGross,
                        value.liquidityNet,
                        value.feeGrowthOutside0X128,
                        value.feeGrowthOutside1X128,
                        value.tickCumulativeOutside,
                        value.secondsPerLiquidityOutsideX128,
                        value.secondsOutside,
                        value.initialized,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ticksReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        liquidityGross: tuple.0,
                        liquidityNet: tuple.1,
                        feeGrowthOutside0X128: tuple.2,
                        feeGrowthOutside1X128: tuple.3,
                        tickCumulativeOutside: tuple.4,
                        secondsPerLiquidityOutsideX128: tuple.5,
                        secondsOutside: tuple.6,
                        initialized: tuple.7,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for ticksCall {
            type Parameters<'a> = (::alloy::sol_types::sol_data::Int<24>,);
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = ticksReturn;
            type ReturnTuple<'a> = (
                ::alloy::sol_types::sol_data::Uint<128>,
                ::alloy::sol_types::sol_data::Int<128>,
                ::alloy::sol_types::sol_data::Uint<256>,
                ::alloy::sol_types::sol_data::Uint<256>,
                ::alloy::sol_types::sol_data::Int<56>,
                ::alloy::sol_types::sol_data::Uint<160>,
                ::alloy::sol_types::sol_data::Uint<32>,
                ::alloy::sol_types::sol_data::Bool,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ticks(int24)";
            const SELECTOR: [u8; 4] = [243u8, 13u8, 186u8, 147u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <::alloy::sol_types::sol_data::Int<24> as alloy_sol_types::SolType>::tokenize(
                        &self._0,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    #[allow(missing_docs)]
    #[doc = "Function with signature `token0()` and selector `0x0dfe1681`.\n```solidity\nfunction token0() external view returns (address);\n```"]
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct token0Call {}
    #[allow(missing_docs)]
    #[doc = "Container type for the return parameters of the [`token0()`](token0Call) function."]
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct token0Return {
        pub _0: ::alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use ::alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<token0Call> for UnderlyingRustTuple<'_> {
                fn from(value: token0Call) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for token0Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (::alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (::alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<token0Return> for UnderlyingRustTuple<'_> {
                fn from(value: token0Return) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for token0Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for token0Call {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = token0Return;
            type ReturnTuple<'a> = (::alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "token0()";
            const SELECTOR: [u8; 4] = [13u8, 254u8, 22u8, 129u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    #[allow(missing_docs)]
    #[doc = "Function with signature `token1()` and selector `0xd21220a7`.\n```solidity\nfunction token1() external view returns (address);\n```"]
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct token1Call {}
    #[allow(missing_docs)]
    #[doc = "Container type for the return parameters of the [`token1()`](token1Call) function."]
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct token1Return {
        pub _0: ::alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use ::alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<token1Call> for UnderlyingRustTuple<'_> {
                fn from(value: token1Call) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for token1Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (::alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (::alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<token1Return> for UnderlyingRustTuple<'_> {
                fn from(value: token1Return) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for token1Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for token1Call {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = token1Return;
            type ReturnTuple<'a> = (::alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "token1()";
            const SELECTOR: [u8; 4] = [210u8, 18u8, 32u8, 167u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    #[allow(missing_docs)]
    #[doc = "Container for all the [`UNI_PAIR_V3`](self) function calls."]
    pub enum UNI_PAIR_V3Calls {
        burn(burnCall),
        collect(collectCall),
        collectProtocol(collectProtocolCall),
        factory(factoryCall),
        fee(feeCall),
        feeGrowthGlobal0X128(feeGrowthGlobal0X128Call),
        feeGrowthGlobal1X128(feeGrowthGlobal1X128Call),
        flash(flashCall),
        increaseObservationCardinalityNext(increaseObservationCardinalityNextCall),
        initialize(initializeCall),
        liquidity(liquidityCall),
        maxLiquidityPerTick(maxLiquidityPerTickCall),
        mint(mintCall),
        observations(observationsCall),
        observe(observeCall),
        positions(positionsCall),
        protocolFees(protocolFeesCall),
        setFeeProtocol(setFeeProtocolCall),
        slot0(slot0Call),
        snapshotCumulativesInside(snapshotCumulativesInsideCall),
        swap(swapCall),
        tickBitmap(tickBitmapCall),
        tickSpacing(tickSpacingCall),
        ticks(ticksCall),
        token0(token0Call),
        token1(token1Call),
    }
    #[automatically_derived]
    impl UNI_PAIR_V3Calls {
        #[doc = r" All the selectors of this enum."]
        #[doc = r""]
        #[doc = r" Note that the selectors might not be in the same order as the variants."]
        #[doc = r" No guarantees are made about the order of the selectors."]
        #[doc = r""]
        #[doc = r" Prefer using `SolInterface` methods instead."]
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [13u8, 254u8, 22u8, 129u8],
            [18u8, 138u8, 203u8, 8u8],
            [26u8, 104u8, 101u8, 2u8],
            [26u8, 216u8, 176u8, 59u8],
            [37u8, 44u8, 9u8, 215u8],
            [50u8, 20u8, 143u8, 103u8],
            [56u8, 80u8, 199u8, 189u8],
            [60u8, 138u8, 125u8, 141u8],
            [70u8, 20u8, 19u8, 25u8],
            [73u8, 14u8, 108u8, 188u8],
            [79u8, 30u8, 179u8, 216u8],
            [81u8, 78u8, 164u8, 191u8],
            [83u8, 57u8, 194u8, 150u8],
            [112u8, 207u8, 117u8, 74u8],
            [130u8, 6u8, 164u8, 209u8],
            [133u8, 182u8, 103u8, 41u8],
            [136u8, 59u8, 219u8, 253u8],
            [163u8, 65u8, 35u8, 167u8],
            [163u8, 136u8, 7u8, 242u8],
            [196u8, 90u8, 1u8, 85u8],
            [208u8, 201u8, 58u8, 124u8],
            [210u8, 18u8, 32u8, 167u8],
            [221u8, 202u8, 63u8, 67u8],
            [243u8, 5u8, 131u8, 153u8],
            [243u8, 13u8, 186u8, 147u8],
            [246u8, 55u8, 115u8, 29u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for UNI_PAIR_V3Calls {
        const NAME: &'static str = "UNI_PAIR_V3Calls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 26usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::burn(_) => <burnCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::collect(_) => <collectCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::collectProtocol(_) => {
                    <collectProtocolCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::factory(_) => <factoryCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::fee(_) => <feeCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::feeGrowthGlobal0X128(_) => {
                    <feeGrowthGlobal0X128Call as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::feeGrowthGlobal1X128(_) => {
                    <feeGrowthGlobal1X128Call as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::flash(_) => <flashCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::increaseObservationCardinalityNext(_) => {
                    <increaseObservationCardinalityNextCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::initialize(_) => <initializeCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::liquidity(_) => <liquidityCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::maxLiquidityPerTick(_) => {
                    <maxLiquidityPerTickCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::mint(_) => <mintCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::observations(_) => <observationsCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::observe(_) => <observeCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::positions(_) => <positionsCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::protocolFees(_) => <protocolFeesCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::setFeeProtocol(_) => {
                    <setFeeProtocolCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::slot0(_) => <slot0Call as alloy_sol_types::SolCall>::SELECTOR,
                Self::snapshotCumulativesInside(_) => {
                    <snapshotCumulativesInsideCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::swap(_) => <swapCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::tickBitmap(_) => <tickBitmapCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::tickSpacing(_) => <tickSpacingCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::ticks(_) => <ticksCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::token0(_) => <token0Call as alloy_sol_types::SolCall>::SELECTOR,
                Self::token1(_) => <token1Call as alloy_sol_types::SolCall>::SELECTOR,
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(&[u8], bool) -> alloy_sol_types::Result<UNI_PAIR_V3Calls>] =
                &[
                    {
                        fn token0(
                            data: &[u8],
                            validate: bool,
                        ) -> alloy_sol_types::Result<UNI_PAIR_V3Calls> {
                            <token0Call as alloy_sol_types::SolCall>::abi_decode_raw(data, validate)
                                .map(UNI_PAIR_V3Calls::token0)
                        }
                        token0
                    },
                    {
                        fn swap(
                            data: &[u8],
                            validate: bool,
                        ) -> alloy_sol_types::Result<UNI_PAIR_V3Calls> {
                            <swapCall as alloy_sol_types::SolCall>::abi_decode_raw(data, validate)
                                .map(UNI_PAIR_V3Calls::swap)
                        }
                        swap
                    },
                    {
                        fn liquidity(
                            data: &[u8],
                            validate: bool,
                        ) -> alloy_sol_types::Result<UNI_PAIR_V3Calls> {
                            <liquidityCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data, validate,
                            )
                            .map(UNI_PAIR_V3Calls::liquidity)
                        }
                        liquidity
                    },
                    {
                        fn protocolFees(
                            data: &[u8],
                            validate: bool,
                        ) -> alloy_sol_types::Result<UNI_PAIR_V3Calls> {
                            <protocolFeesCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data, validate,
                            )
                            .map(UNI_PAIR_V3Calls::protocolFees)
                        }
                        protocolFees
                    },
                    {
                        fn observations(
                            data: &[u8],
                            validate: bool,
                        ) -> alloy_sol_types::Result<UNI_PAIR_V3Calls> {
                            <observationsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data, validate,
                            )
                            .map(UNI_PAIR_V3Calls::observations)
                        }
                        observations
                    },
                    {
                        fn increaseObservationCardinalityNext(
                            data: &[u8],
                            validate: bool,
                        ) -> alloy_sol_types::Result<UNI_PAIR_V3Calls> {
                            <increaseObservationCardinalityNextCall as alloy_sol_types::SolCall>::abi_decode_raw(data, validate).map(UNI_PAIR_V3Calls::increaseObservationCardinalityNext)
                        }
                        increaseObservationCardinalityNext
                    },
                    {
                        fn slot0(
                            data: &[u8],
                            validate: bool,
                        ) -> alloy_sol_types::Result<UNI_PAIR_V3Calls> {
                            <slot0Call as alloy_sol_types::SolCall>::abi_decode_raw(data, validate)
                                .map(UNI_PAIR_V3Calls::slot0)
                        }
                        slot0
                    },
                    {
                        fn mint(
                            data: &[u8],
                            validate: bool,
                        ) -> alloy_sol_types::Result<UNI_PAIR_V3Calls> {
                            <mintCall as alloy_sol_types::SolCall>::abi_decode_raw(data, validate)
                                .map(UNI_PAIR_V3Calls::mint)
                        }
                        mint
                    },
                    {
                        fn feeGrowthGlobal1X128(
                            data: &[u8],
                            validate: bool,
                        ) -> alloy_sol_types::Result<UNI_PAIR_V3Calls> {
                            <feeGrowthGlobal1X128Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data, validate,
                            )
                            .map(UNI_PAIR_V3Calls::feeGrowthGlobal1X128)
                        }
                        feeGrowthGlobal1X128
                    },
                    {
                        fn flash(
                            data: &[u8],
                            validate: bool,
                        ) -> alloy_sol_types::Result<UNI_PAIR_V3Calls> {
                            <flashCall as alloy_sol_types::SolCall>::abi_decode_raw(data, validate)
                                .map(UNI_PAIR_V3Calls::flash)
                        }
                        flash
                    },
                    {
                        fn collect(
                            data: &[u8],
                            validate: bool,
                        ) -> alloy_sol_types::Result<UNI_PAIR_V3Calls> {
                            <collectCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data, validate,
                            )
                            .map(UNI_PAIR_V3Calls::collect)
                        }
                        collect
                    },
                    {
                        fn positions(
                            data: &[u8],
                            validate: bool,
                        ) -> alloy_sol_types::Result<UNI_PAIR_V3Calls> {
                            <positionsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data, validate,
                            )
                            .map(UNI_PAIR_V3Calls::positions)
                        }
                        positions
                    },
                    {
                        fn tickBitmap(
                            data: &[u8],
                            validate: bool,
                        ) -> alloy_sol_types::Result<UNI_PAIR_V3Calls> {
                            <tickBitmapCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data, validate,
                            )
                            .map(UNI_PAIR_V3Calls::tickBitmap)
                        }
                        tickBitmap
                    },
                    {
                        fn maxLiquidityPerTick(
                            data: &[u8],
                            validate: bool,
                        ) -> alloy_sol_types::Result<UNI_PAIR_V3Calls> {
                            <maxLiquidityPerTickCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data, validate,
                            )
                            .map(UNI_PAIR_V3Calls::maxLiquidityPerTick)
                        }
                        maxLiquidityPerTick
                    },
                    {
                        fn setFeeProtocol(
                            data: &[u8],
                            validate: bool,
                        ) -> alloy_sol_types::Result<UNI_PAIR_V3Calls> {
                            <setFeeProtocolCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data, validate,
                            )
                            .map(UNI_PAIR_V3Calls::setFeeProtocol)
                        }
                        setFeeProtocol
                    },
                    {
                        fn collectProtocol(
                            data: &[u8],
                            validate: bool,
                        ) -> alloy_sol_types::Result<UNI_PAIR_V3Calls> {
                            <collectProtocolCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data, validate,
                            )
                            .map(UNI_PAIR_V3Calls::collectProtocol)
                        }
                        collectProtocol
                    },
                    {
                        fn observe(
                            data: &[u8],
                            validate: bool,
                        ) -> alloy_sol_types::Result<UNI_PAIR_V3Calls> {
                            <observeCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data, validate,
                            )
                            .map(UNI_PAIR_V3Calls::observe)
                        }
                        observe
                    },
                    {
                        fn burn(
                            data: &[u8],
                            validate: bool,
                        ) -> alloy_sol_types::Result<UNI_PAIR_V3Calls> {
                            <burnCall as alloy_sol_types::SolCall>::abi_decode_raw(data, validate)
                                .map(UNI_PAIR_V3Calls::burn)
                        }
                        burn
                    },
                    {
                        fn snapshotCumulativesInside(
                            data: &[u8],
                            validate: bool,
                        ) -> alloy_sol_types::Result<UNI_PAIR_V3Calls> {
                            <snapshotCumulativesInsideCall as alloy_sol_types::SolCall>::abi_decode_raw(data, validate).map(UNI_PAIR_V3Calls::snapshotCumulativesInside)
                        }
                        snapshotCumulativesInside
                    },
                    {
                        fn factory(
                            data: &[u8],
                            validate: bool,
                        ) -> alloy_sol_types::Result<UNI_PAIR_V3Calls> {
                            <factoryCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data, validate,
                            )
                            .map(UNI_PAIR_V3Calls::factory)
                        }
                        factory
                    },
                    {
                        fn tickSpacing(
                            data: &[u8],
                            validate: bool,
                        ) -> alloy_sol_types::Result<UNI_PAIR_V3Calls> {
                            <tickSpacingCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data, validate,
                            )
                            .map(UNI_PAIR_V3Calls::tickSpacing)
                        }
                        tickSpacing
                    },
                    {
                        fn token1(
                            data: &[u8],
                            validate: bool,
                        ) -> alloy_sol_types::Result<UNI_PAIR_V3Calls> {
                            <token1Call as alloy_sol_types::SolCall>::abi_decode_raw(data, validate)
                                .map(UNI_PAIR_V3Calls::token1)
                        }
                        token1
                    },
                    {
                        fn fee(
                            data: &[u8],
                            validate: bool,
                        ) -> alloy_sol_types::Result<UNI_PAIR_V3Calls> {
                            <feeCall as alloy_sol_types::SolCall>::abi_decode_raw(data, validate)
                                .map(UNI_PAIR_V3Calls::fee)
                        }
                        fee
                    },
                    {
                        fn feeGrowthGlobal0X128(
                            data: &[u8],
                            validate: bool,
                        ) -> alloy_sol_types::Result<UNI_PAIR_V3Calls> {
                            <feeGrowthGlobal0X128Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data, validate,
                            )
                            .map(UNI_PAIR_V3Calls::feeGrowthGlobal0X128)
                        }
                        feeGrowthGlobal0X128
                    },
                    {
                        fn ticks(
                            data: &[u8],
                            validate: bool,
                        ) -> alloy_sol_types::Result<UNI_PAIR_V3Calls> {
                            <ticksCall as alloy_sol_types::SolCall>::abi_decode_raw(data, validate)
                                .map(UNI_PAIR_V3Calls::ticks)
                        }
                        ticks
                    },
                    {
                        fn initialize(
                            data: &[u8],
                            validate: bool,
                        ) -> alloy_sol_types::Result<UNI_PAIR_V3Calls> {
                            <initializeCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data, validate,
                            )
                            .map(UNI_PAIR_V3Calls::initialize)
                        }
                        initialize
                    },
                ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(alloy_sol_types::Error::unknown_selector(
                    <Self as alloy_sol_types::SolInterface>::NAME,
                    selector,
                ));
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::burn(inner) => <burnCall as alloy_sol_types::SolCall>::abi_encoded_size(inner),
                Self::collect(inner) => <collectCall as alloy_sol_types::SolCall>::abi_encoded_size(inner),
                Self::collectProtocol(inner) => <collectProtocolCall as alloy_sol_types::SolCall>::abi_encoded_size(inner),
                Self::factory(inner) => <factoryCall as alloy_sol_types::SolCall>::abi_encoded_size(inner),
                Self::fee(inner) => <feeCall as alloy_sol_types::SolCall>::abi_encoded_size(inner),
                Self::feeGrowthGlobal0X128(inner) => <feeGrowthGlobal0X128Call as alloy_sol_types::SolCall>::abi_encoded_size(inner),
                Self::feeGrowthGlobal1X128(inner) => <feeGrowthGlobal1X128Call as alloy_sol_types::SolCall>::abi_encoded_size(inner),
                Self::flash(inner) => <flashCall as alloy_sol_types::SolCall>::abi_encoded_size(inner),
                Self::increaseObservationCardinalityNext(inner) => <increaseObservationCardinalityNextCall as alloy_sol_types::SolCall>::abi_encoded_size(inner),
                Self::initialize(inner) => <initializeCall as alloy_sol_types::SolCall>::abi_encoded_size(inner),
                Self::liquidity(inner) => <liquidityCall as alloy_sol_types::SolCall>::abi_encoded_size(inner),
                Self::maxLiquidityPerTick(inner) => <maxLiquidityPerTickCall as alloy_sol_types::SolCall>::abi_encoded_size(inner),
                Self::mint(inner) => <mintCall as alloy_sol_types::SolCall>::abi_encoded_size(inner),
                Self::observations(inner) => <observationsCall as alloy_sol_types::SolCall>::abi_encoded_size(inner),
                Self::observe(inner) => <observeCall as alloy_sol_types::SolCall>::abi_encoded_size(inner),
                Self::positions(inner) => <positionsCall as alloy_sol_types::SolCall>::abi_encoded_size(inner),
                Self::protocolFees(inner) => <protocolFeesCall as alloy_sol_types::SolCall>::abi_encoded_size(inner),
                Self::setFeeProtocol(inner) => <setFeeProtocolCall as alloy_sol_types::SolCall>::abi_encoded_size(inner),
                Self::slot0(inner) => <slot0Call as alloy_sol_types::SolCall>::abi_encoded_size(inner),
                Self::snapshotCumulativesInside(inner) => <snapshotCumulativesInsideCall as alloy_sol_types::SolCall>::abi_encoded_size(inner),
                Self::swap(inner) => <swapCall as alloy_sol_types::SolCall>::abi_encoded_size(inner),
                Self::tickBitmap(inner) => <tickBitmapCall as alloy_sol_types::SolCall>::abi_encoded_size(inner),
                Self::tickSpacing(inner) => <tickSpacingCall as alloy_sol_types::SolCall>::abi_encoded_size(inner),
                Self::ticks(inner) => <ticksCall as alloy_sol_types::SolCall>::abi_encoded_size(inner),
                Self::token0(inner) => <token0Call as alloy_sol_types::SolCall>::abi_encoded_size(inner),
                Self::token1(inner) => <token1Call as alloy_sol_types::SolCall>::abi_encoded_size(inner),
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::burn(inner) => <burnCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out),
                Self::collect(inner) => <collectCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out),
                Self::collectProtocol(inner) => <collectProtocolCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out),
                Self::factory(inner) => <factoryCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out),
                Self::fee(inner) => <feeCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out),
                Self::feeGrowthGlobal0X128(inner) => <feeGrowthGlobal0X128Call as alloy_sol_types::SolCall>::abi_encode_raw(inner, out),
                Self::feeGrowthGlobal1X128(inner) => <feeGrowthGlobal1X128Call as alloy_sol_types::SolCall>::abi_encode_raw(inner, out),
                Self::flash(inner) => <flashCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out),
                Self::increaseObservationCardinalityNext(inner) => <increaseObservationCardinalityNextCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out),
                Self::initialize(inner) => <initializeCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out),
                Self::liquidity(inner) => <liquidityCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out),
                Self::maxLiquidityPerTick(inner) => <maxLiquidityPerTickCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out),
                Self::mint(inner) => <mintCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out),
                Self::observations(inner) => <observationsCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out),
                Self::observe(inner) => <observeCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out),
                Self::positions(inner) => <positionsCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out),
                Self::protocolFees(inner) => <protocolFeesCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out),
                Self::setFeeProtocol(inner) => <setFeeProtocolCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out),
                Self::slot0(inner) => <slot0Call as alloy_sol_types::SolCall>::abi_encode_raw(inner, out),
                Self::snapshotCumulativesInside(inner) => <snapshotCumulativesInsideCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out),
                Self::swap(inner) => <swapCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out),
                Self::tickBitmap(inner) => <tickBitmapCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out),
                Self::tickSpacing(inner) => <tickSpacingCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out),
                Self::ticks(inner) => <ticksCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out),
                Self::token0(inner) => <token0Call as alloy_sol_types::SolCall>::abi_encode_raw(inner, out),
                Self::token1(inner) => <token1Call as alloy_sol_types::SolCall>::abi_encode_raw(inner, out),
            }
        }
    }
    #[allow(missing_docs)]
    #[doc = "Container for all the [`UNI_PAIR_V3`](self) events."]
    pub enum UNI_PAIR_V3Events {
        Burn(Burn),
        Collect(Collect),
        CollectProtocol(CollectProtocol),
        Flash(Flash),
        IncreaseObservationCardinalityNext(IncreaseObservationCardinalityNext),
        Initialize(Initialize),
        Mint(Mint),
        SetFeeProtocol(SetFeeProtocol),
        Swap(Swap),
    }
    #[automatically_derived]
    impl UNI_PAIR_V3Events {
        #[doc = r" All the selectors of this enum."]
        #[doc = r""]
        #[doc = r" Note that the selectors might not be in the same order as the variants."]
        #[doc = r" No guarantees are made about the order of the selectors."]
        #[doc = r""]
        #[doc = r" Prefer using `SolInterface` methods instead."]
        pub const SELECTORS: &'static [[u8; 32usize]] = &[
            [
                12u8, 57u8, 108u8, 217u8, 137u8, 163u8, 159u8, 68u8, 89u8, 181u8, 250u8, 26u8,
                237u8, 106u8, 154u8, 141u8, 205u8, 188u8, 69u8, 144u8, 138u8, 207u8, 214u8, 126u8,
                2u8, 140u8, 213u8, 104u8, 218u8, 152u8, 152u8, 44u8,
            ],
            [
                89u8, 107u8, 87u8, 57u8, 6u8, 33u8, 141u8, 52u8, 17u8, 133u8, 11u8, 38u8, 166u8,
                180u8, 55u8, 214u8, 196u8, 82u8, 47u8, 219u8, 67u8, 210u8, 210u8, 56u8, 98u8, 99u8,
                248u8, 109u8, 80u8, 184u8, 177u8, 81u8,
            ],
            [
                112u8, 147u8, 83u8, 56u8, 230u8, 151u8, 117u8, 69u8, 106u8, 133u8, 221u8, 239u8,
                34u8, 108u8, 57u8, 95u8, 182u8, 104u8, 182u8, 63u8, 160u8, 17u8, 95u8, 95u8, 32u8,
                97u8, 11u8, 56u8, 142u8, 108u8, 169u8, 192u8,
            ],
            [
                122u8, 83u8, 8u8, 11u8, 164u8, 20u8, 21u8, 139u8, 231u8, 236u8, 105u8, 185u8,
                135u8, 181u8, 251u8, 125u8, 7u8, 222u8, 225u8, 1u8, 254u8, 133u8, 72u8, 143u8, 8u8,
                83u8, 174u8, 22u8, 35u8, 157u8, 11u8, 222u8,
            ],
            [
                151u8, 61u8, 141u8, 146u8, 187u8, 41u8, 159u8, 74u8, 246u8, 206u8, 73u8, 181u8,
                42u8, 138u8, 219u8, 133u8, 174u8, 70u8, 185u8, 242u8, 20u8, 196u8, 196u8, 252u8,
                6u8, 172u8, 119u8, 64u8, 18u8, 55u8, 177u8, 51u8,
            ],
            [
                152u8, 99u8, 96u8, 54u8, 203u8, 102u8, 169u8, 193u8, 154u8, 55u8, 67u8, 94u8,
                252u8, 30u8, 144u8, 20u8, 33u8, 144u8, 33u8, 78u8, 138u8, 190u8, 184u8, 33u8,
                189u8, 186u8, 63u8, 41u8, 144u8, 221u8, 76u8, 149u8,
            ],
            [
                172u8, 73u8, 229u8, 24u8, 249u8, 10u8, 53u8, 143u8, 101u8, 46u8, 68u8, 0u8, 22u8,
                79u8, 5u8, 165u8, 216u8, 247u8, 227u8, 94u8, 119u8, 71u8, 39u8, 155u8, 195u8,
                169u8, 61u8, 191u8, 88u8, 78u8, 18u8, 90u8,
            ],
            [
                189u8, 189u8, 183u8, 29u8, 120u8, 96u8, 55u8, 107u8, 165u8, 43u8, 37u8, 165u8, 2u8,
                139u8, 238u8, 162u8, 53u8, 129u8, 54u8, 74u8, 64u8, 82u8, 47u8, 107u8, 207u8,
                184u8, 107u8, 177u8, 242u8, 220u8, 166u8, 51u8,
            ],
            [
                196u8, 32u8, 121u8, 249u8, 74u8, 99u8, 80u8, 215u8, 230u8, 35u8, 95u8, 41u8, 23u8,
                73u8, 36u8, 249u8, 40u8, 204u8, 42u8, 200u8, 24u8, 235u8, 100u8, 254u8, 216u8, 0u8,
                78u8, 17u8, 95u8, 188u8, 202u8, 103u8,
            ],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolEventInterface for UNI_PAIR_V3Events {
        const NAME: &'static str = "UNI_PAIR_V3Events";
        const COUNT: usize = 9usize;
        fn decode_raw_log(
            topics: &[alloy_sol_types::Word],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            match topics.first().copied() {
                Some(<Burn as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => <Burn as alloy_sol_types::SolEvent>::decode_raw_log(topics, data, validate).map(Self::Burn),
                Some(<Collect as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => <Collect as alloy_sol_types::SolEvent>::decode_raw_log(topics, data, validate).map(Self::Collect),
                Some(<CollectProtocol as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => <CollectProtocol as alloy_sol_types::SolEvent>::decode_raw_log(topics, data, validate).map(Self::CollectProtocol),
                Some(<Flash as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => <Flash as alloy_sol_types::SolEvent>::decode_raw_log(topics, data, validate).map(Self::Flash),
                Some(<IncreaseObservationCardinalityNext as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => <IncreaseObservationCardinalityNext as alloy_sol_types::SolEvent>::decode_raw_log(topics, data, validate).map(Self::IncreaseObservationCardinalityNext),
                Some(<Initialize as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => <Initialize as alloy_sol_types::SolEvent>::decode_raw_log(topics, data, validate).map(Self::Initialize),
                Some(<Mint as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => <Mint as alloy_sol_types::SolEvent>::decode_raw_log(topics, data, validate).map(Self::Mint),
                Some(<SetFeeProtocol as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => <SetFeeProtocol as alloy_sol_types::SolEvent>::decode_raw_log(topics, data, validate).map(Self::SetFeeProtocol),
                Some(<Swap as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => <Swap as alloy_sol_types::SolEvent>::decode_raw_log(topics, data, validate).map(Self::Swap),
                _ => { alloy_sol_types::private::Err(alloy_sol_types::Error::InvalidLog { name: <Self as alloy_sol_types::SolEventInterface>::NAME, log: alloy_sol_types::private::Box::new(alloy_sol_types::private::LogData::new_unchecked(topics.to_vec(), data.to_vec().into() )) }) }
            }
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::private::IntoLogData for UNI_PAIR_V3Events {
        fn to_log_data(&self) -> alloy_sol_types::private::LogData {
            match self {
                Self::Burn(inner) => alloy_sol_types::private::IntoLogData::to_log_data(inner),
                Self::Collect(inner) => alloy_sol_types::private::IntoLogData::to_log_data(inner),
                Self::CollectProtocol(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::Flash(inner) => alloy_sol_types::private::IntoLogData::to_log_data(inner),
                Self::IncreaseObservationCardinalityNext(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::Initialize(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::Mint(inner) => alloy_sol_types::private::IntoLogData::to_log_data(inner),
                Self::SetFeeProtocol(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::Swap(inner) => alloy_sol_types::private::IntoLogData::to_log_data(inner),
            }
        }
        fn into_log_data(self) -> alloy_sol_types::private::LogData {
            match self {
                Self::Burn(inner) => alloy_sol_types::private::IntoLogData::into_log_data(inner),
                Self::Collect(inner) => alloy_sol_types::private::IntoLogData::into_log_data(inner),
                Self::CollectProtocol(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::Flash(inner) => alloy_sol_types::private::IntoLogData::into_log_data(inner),
                Self::IncreaseObservationCardinalityNext(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::Initialize(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::Mint(inner) => alloy_sol_types::private::IntoLogData::into_log_data(inner),
                Self::SetFeeProtocol(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::Swap(inner) => alloy_sol_types::private::IntoLogData::into_log_data(inner),
            }
        }
    }
    use ::alloy::contract as alloy_contract;
    #[doc = "Creates a new wrapper around an on-chain [`UNI_PAIR_V3`](self) contract instance.\n\nSee the [wrapper's documentation](`UNI_PAIR_V3Instance`) for more details."]
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> UNI_PAIR_V3Instance<T, P, N> {
        UNI_PAIR_V3Instance::<T, P, N>::new(address, provider)
    }
    #[doc = "A [`UNI_PAIR_V3`](self) instance.\n\nContains type-safe methods for interacting with an on-chain instance of the\n[`UNI_PAIR_V3`](self) contract located at a given `address`, using a given\nprovider `P`.\n\nIf the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)\ndocumentation on how to provide it), the `deploy` and `deploy_builder` methods can\nbe used to deploy a new instance of the contract.\n\nSee the [module-level documentation](self) for all the available methods."]
    #[derive(Clone)]
    pub struct UNI_PAIR_V3Instance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for UNI_PAIR_V3Instance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("UNI_PAIR_V3Instance")
                .field(&self.address)
                .finish()
        }
    }
    #[doc = r" Instantiation and getters/setters."]
    #[automatically_derived]
    impl<
            T: alloy_contract::private::Transport + ::core::clone::Clone,
            P: alloy_contract::private::Provider<T, N>,
            N: alloy_contract::private::Network,
        > UNI_PAIR_V3Instance<T, P, N>
    {
        #[doc = "Creates a new wrapper around an on-chain [`UNI_PAIR_V3`](self) contract instance.\n\nSee the [wrapper's documentation](`UNI_PAIR_V3Instance`) for more details."]
        #[inline]
        pub const fn new(address: alloy_sol_types::private::Address, provider: P) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        #[doc = r" Returns a reference to the address."]
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        #[doc = r" Sets the address."]
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        #[doc = r" Sets the address and returns `self`."]
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        #[doc = r" Returns a reference to the provider."]
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> UNI_PAIR_V3Instance<T, &P, N> {
        #[doc = r" Clones the provider and returns a new instance with the cloned provider."]
        #[inline]
        pub fn with_cloned_provider(self) -> UNI_PAIR_V3Instance<T, P, N> {
            UNI_PAIR_V3Instance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    #[doc = r" Function calls."]
    #[automatically_derived]
    impl<
            T: alloy_contract::private::Transport + ::core::clone::Clone,
            P: alloy_contract::private::Provider<T, N>,
            N: alloy_contract::private::Network,
        > UNI_PAIR_V3Instance<T, P, N>
    {
        #[doc = r" Creates a new call builder using this contract instance's provider and address."]
        #[doc = r""]
        #[doc = r" Note that the call can be any function call, not just those defined in this"]
        #[doc = r" contract. Prefer using the other methods for building type-safe contract calls."]
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        #[doc = "Creates a new call builder for the [`burn`] function."]
        pub fn burn(
            &self,
            tickLower: ::alloy::sol_types::private::primitives::aliases::I24,
            tickUpper: ::alloy::sol_types::private::primitives::aliases::I24,
            amount: u128,
        ) -> alloy_contract::SolCallBuilder<T, &P, burnCall, N> {
            self.call_builder(&burnCall {
                tickLower,
                tickUpper,
                amount,
            })
        }
        #[doc = "Creates a new call builder for the [`collect`] function."]
        pub fn collect(
            &self,
            recipient: ::alloy::sol_types::private::Address,
            tickLower: ::alloy::sol_types::private::primitives::aliases::I24,
            tickUpper: ::alloy::sol_types::private::primitives::aliases::I24,
            amount0Requested: u128,
            amount1Requested: u128,
        ) -> alloy_contract::SolCallBuilder<T, &P, collectCall, N> {
            self.call_builder(&collectCall {
                recipient,
                tickLower,
                tickUpper,
                amount0Requested,
                amount1Requested,
            })
        }
        #[doc = "Creates a new call builder for the [`collectProtocol`] function."]
        pub fn collectProtocol(
            &self,
            recipient: ::alloy::sol_types::private::Address,
            amount0Requested: u128,
            amount1Requested: u128,
        ) -> alloy_contract::SolCallBuilder<T, &P, collectProtocolCall, N> {
            self.call_builder(&collectProtocolCall {
                recipient,
                amount0Requested,
                amount1Requested,
            })
        }
        #[doc = "Creates a new call builder for the [`factory`] function."]
        pub fn factory(&self) -> alloy_contract::SolCallBuilder<T, &P, factoryCall, N> {
            self.call_builder(&factoryCall {})
        }
        #[doc = "Creates a new call builder for the [`fee`] function."]
        pub fn fee(&self) -> alloy_contract::SolCallBuilder<T, &P, feeCall, N> {
            self.call_builder(&feeCall {})
        }
        #[doc = "Creates a new call builder for the [`feeGrowthGlobal0X128`] function."]
        pub fn feeGrowthGlobal0X128(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, feeGrowthGlobal0X128Call, N> {
            self.call_builder(&feeGrowthGlobal0X128Call {})
        }
        #[doc = "Creates a new call builder for the [`feeGrowthGlobal1X128`] function."]
        pub fn feeGrowthGlobal1X128(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, feeGrowthGlobal1X128Call, N> {
            self.call_builder(&feeGrowthGlobal1X128Call {})
        }
        #[doc = "Creates a new call builder for the [`flash`] function."]
        pub fn flash(
            &self,
            recipient: ::alloy::sol_types::private::Address,
            amount0: ::alloy::sol_types::private::primitives::aliases::U256,
            amount1: ::alloy::sol_types::private::primitives::aliases::U256,
            data: ::alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, flashCall, N> {
            self.call_builder(&flashCall {
                recipient,
                amount0,
                amount1,
                data,
            })
        }
        #[doc = "Creates a new call builder for the [`increaseObservationCardinalityNext`] function."]
        pub fn increaseObservationCardinalityNext(
            &self,
            observationCardinalityNext: u16,
        ) -> alloy_contract::SolCallBuilder<T, &P, increaseObservationCardinalityNextCall, N>
        {
            self.call_builder(&increaseObservationCardinalityNextCall {
                observationCardinalityNext,
            })
        }
        #[doc = "Creates a new call builder for the [`initialize`] function."]
        pub fn initialize(
            &self,
            sqrtPriceX96: ::alloy::sol_types::private::primitives::aliases::U160,
        ) -> alloy_contract::SolCallBuilder<T, &P, initializeCall, N> {
            self.call_builder(&initializeCall { sqrtPriceX96 })
        }
        #[doc = "Creates a new call builder for the [`liquidity`] function."]
        pub fn liquidity(&self) -> alloy_contract::SolCallBuilder<T, &P, liquidityCall, N> {
            self.call_builder(&liquidityCall {})
        }
        #[doc = "Creates a new call builder for the [`maxLiquidityPerTick`] function."]
        pub fn maxLiquidityPerTick(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, maxLiquidityPerTickCall, N> {
            self.call_builder(&maxLiquidityPerTickCall {})
        }
        #[doc = "Creates a new call builder for the [`mint`] function."]
        pub fn mint(
            &self,
            recipient: ::alloy::sol_types::private::Address,
            tickLower: ::alloy::sol_types::private::primitives::aliases::I24,
            tickUpper: ::alloy::sol_types::private::primitives::aliases::I24,
            amount: u128,
            data: ::alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, mintCall, N> {
            self.call_builder(&mintCall {
                recipient,
                tickLower,
                tickUpper,
                amount,
                data,
            })
        }
        #[doc = "Creates a new call builder for the [`observations`] function."]
        pub fn observations(
            &self,
            _0: ::alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, observationsCall, N> {
            self.call_builder(&observationsCall { _0 })
        }
        #[doc = "Creates a new call builder for the [`observe`] function."]
        pub fn observe(
            &self,
            secondsAgos: ::alloy::sol_types::private::Vec<u32>,
        ) -> alloy_contract::SolCallBuilder<T, &P, observeCall, N> {
            self.call_builder(&observeCall { secondsAgos })
        }
        #[doc = "Creates a new call builder for the [`positions`] function."]
        pub fn positions(
            &self,
            _0: ::alloy::sol_types::private::FixedBytes<32>,
        ) -> alloy_contract::SolCallBuilder<T, &P, positionsCall, N> {
            self.call_builder(&positionsCall { _0 })
        }
        #[doc = "Creates a new call builder for the [`protocolFees`] function."]
        pub fn protocolFees(&self) -> alloy_contract::SolCallBuilder<T, &P, protocolFeesCall, N> {
            self.call_builder(&protocolFeesCall {})
        }
        #[doc = "Creates a new call builder for the [`setFeeProtocol`] function."]
        pub fn setFeeProtocol(
            &self,
            feeProtocol0: u8,
            feeProtocol1: u8,
        ) -> alloy_contract::SolCallBuilder<T, &P, setFeeProtocolCall, N> {
            self.call_builder(&setFeeProtocolCall {
                feeProtocol0,
                feeProtocol1,
            })
        }
        #[doc = "Creates a new call builder for the [`slot0`] function."]
        pub fn slot0(&self) -> alloy_contract::SolCallBuilder<T, &P, slot0Call, N> {
            self.call_builder(&slot0Call {})
        }
        #[doc = "Creates a new call builder for the [`snapshotCumulativesInside`] function."]
        pub fn snapshotCumulativesInside(
            &self,
            tickLower: ::alloy::sol_types::private::primitives::aliases::I24,
            tickUpper: ::alloy::sol_types::private::primitives::aliases::I24,
        ) -> alloy_contract::SolCallBuilder<T, &P, snapshotCumulativesInsideCall, N> {
            self.call_builder(&snapshotCumulativesInsideCall {
                tickLower,
                tickUpper,
            })
        }
        #[doc = "Creates a new call builder for the [`swap`] function."]
        pub fn swap(
            &self,
            recipient: ::alloy::sol_types::private::Address,
            zeroForOne: bool,
            amountSpecified: ::alloy::sol_types::private::primitives::aliases::I256,
            sqrtPriceLimitX96: ::alloy::sol_types::private::primitives::aliases::U160,
            data: ::alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, swapCall, N> {
            self.call_builder(&swapCall {
                recipient,
                zeroForOne,
                amountSpecified,
                sqrtPriceLimitX96,
                data,
            })
        }
        #[doc = "Creates a new call builder for the [`tickBitmap`] function."]
        pub fn tickBitmap(
            &self,
            _0: i16,
        ) -> alloy_contract::SolCallBuilder<T, &P, tickBitmapCall, N> {
            self.call_builder(&tickBitmapCall { _0 })
        }
        #[doc = "Creates a new call builder for the [`tickSpacing`] function."]
        pub fn tickSpacing(&self) -> alloy_contract::SolCallBuilder<T, &P, tickSpacingCall, N> {
            self.call_builder(&tickSpacingCall {})
        }
        #[doc = "Creates a new call builder for the [`ticks`] function."]
        pub fn ticks(
            &self,
            _0: ::alloy::sol_types::private::primitives::aliases::I24,
        ) -> alloy_contract::SolCallBuilder<T, &P, ticksCall, N> {
            self.call_builder(&ticksCall { _0 })
        }
        #[doc = "Creates a new call builder for the [`token0`] function."]
        pub fn token0(&self) -> alloy_contract::SolCallBuilder<T, &P, token0Call, N> {
            self.call_builder(&token0Call {})
        }
        #[doc = "Creates a new call builder for the [`token1`] function."]
        pub fn token1(&self) -> alloy_contract::SolCallBuilder<T, &P, token1Call, N> {
            self.call_builder(&token1Call {})
        }
    }
    #[doc = r" Event filters."]
    #[automatically_derived]
    impl<
            T: alloy_contract::private::Transport + ::core::clone::Clone,
            P: alloy_contract::private::Provider<T, N>,
            N: alloy_contract::private::Network,
        > UNI_PAIR_V3Instance<T, P, N>
    {
        #[doc = r" Creates a new event filter using this contract instance's provider and address."]
        #[doc = r""]
        #[doc = r" Note that the type can be any event, not just those defined in this contract."]
        #[doc = r" Prefer using the other methods for building type-safe event filters."]
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
        #[doc = "Creates a new event filter for the [`Burn`] event."]
        pub fn Burn_filter(&self) -> alloy_contract::Event<T, &P, Burn, N> {
            self.event_filter::<Burn>()
        }
        #[doc = "Creates a new event filter for the [`Collect`] event."]
        pub fn Collect_filter(&self) -> alloy_contract::Event<T, &P, Collect, N> {
            self.event_filter::<Collect>()
        }
        #[doc = "Creates a new event filter for the [`CollectProtocol`] event."]
        pub fn CollectProtocol_filter(&self) -> alloy_contract::Event<T, &P, CollectProtocol, N> {
            self.event_filter::<CollectProtocol>()
        }
        #[doc = "Creates a new event filter for the [`Flash`] event."]
        pub fn Flash_filter(&self) -> alloy_contract::Event<T, &P, Flash, N> {
            self.event_filter::<Flash>()
        }
        #[doc = "Creates a new event filter for the [`IncreaseObservationCardinalityNext`] event."]
        pub fn IncreaseObservationCardinalityNext_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, IncreaseObservationCardinalityNext, N> {
            self.event_filter::<IncreaseObservationCardinalityNext>()
        }
        #[doc = "Creates a new event filter for the [`Initialize`] event."]
        pub fn Initialize_filter(&self) -> alloy_contract::Event<T, &P, Initialize, N> {
            self.event_filter::<Initialize>()
        }
        #[doc = "Creates a new event filter for the [`Mint`] event."]
        pub fn Mint_filter(&self) -> alloy_contract::Event<T, &P, Mint, N> {
            self.event_filter::<Mint>()
        }
        #[doc = "Creates a new event filter for the [`SetFeeProtocol`] event."]
        pub fn SetFeeProtocol_filter(&self) -> alloy_contract::Event<T, &P, SetFeeProtocol, N> {
            self.event_filter::<SetFeeProtocol>()
        }
        #[doc = "Creates a new event filter for the [`Swap`] event."]
        pub fn Swap_filter(&self) -> alloy_contract::Event<T, &P, Swap, N> {
            self.event_filter::<Swap>()
        }
    }
}
